//=========================================
//
// comment     : MapleStory Utility
// param       : Nonef
// return      : None
// 
// Display Dpl : 1366x768 [only]
//
// Copy Right (C) 2018 All Right Reserved. 
//   @author k.kawabata @kawaken1025
//     Create Date : 2018/04/28
//=========================================

CALL ../Log/logWriter.uws;
CALL ../Common/Messages.uws;
CALL ../Common/CommonKeySetting.uws;
CALL ../MapleManagement/MapleManagement.uws;
CALL ../MapleAPI/api/v1/LogWriteAPI.uws;

public PIC_PATH             = "../picture/";
public SCREEN_SHOT_SAVE_DIR = "../picture/ScreenShot/";
public MAPLE_STORY_EXE_DIR  = "\\192.168.10.107\MapleStory - コピー\MapleStory.exe";
public LOGIN_INFO_INI_PATH  = "C:\Users\sisyo\Documents\LoginInfo.ini";
public LOGIN_INFO_CSV_PATH  = "C:\LoginInfo.csv"
public MAPLE_RESULT_OK      = 0;
public MAPLE_RESULT_NG      = 1;
public MAPLE_RESULT_OK_BOOL = true;
public MAPLE_LOGIN_PW = "";
public SECOND_PW = "";
public isGM = false;

CLASS lib

function lib()
    try
        GetLoginInfo();
        ifb MAPLE_LOGIN_PW = "" and SECOND_PW = ""
            print "ログイン情報を取得できませんでした。"
        endif
    except
        print "ログイン情報を取得できませんでした。"
    endtry
    result = 0;
fend

//==========================================
// comment : ファミリアの気力が500以下であれば回復
// param   : None
// return  : 0 
//==========================================
function checkFamiliarPower()

    // 解像度によりチェック範囲を切替
    wSize = getWindowSize()
    imgPath = "../picture/fam40.bmp"
    ifb wSize = "800x600"
        x1 = 233
        y1 = 506
        x2 = 250
        y2 = 540
        imgPath = "../picture/fam40_800x600.bmp"
    else
        x1 = 335
        y1 = 590
        x2 = 360
        y2 = 620
    endif

    MMV(300,100,100)
    KBD(comKey.FAM_BOOK_KEY,0,500);
    SLEEP(0.5);
    ifb chkimg(imgPath,0,x1,y1,x2,y2);
        KBD(comKey.FAM_RECOVERY_KEY,0,10);
        logger.logWriter(LogLevel.LOG_INFO,Messages.RECOVERY_FAMILIAR_POWER);
    endif
    KBD(comKey.FAM_BOOK_KEY,0,500);
    sleep(1);
    // ファミリア図鑑が開かれているかチェック
    while true
        ifb !chkimg("../picture/new_fam_system/ui/fam_book_x.bmp",0,0,0,1366,768);
            break;
        else
            KBD(comKey.FAM_BOOK_KEY,0,500);
            sleep(0.3);
        endif
    wend

    result = MAPLE_RESULT_OK;
fend

function checkFamiliarPower2()
	mmv(300,100,100)
	while !chkimg("../picture/ファミリアホーム.bmp",0,0,0,1000,500)
	KBD(VK_OEM_6,CLICK,500)
	sleep(0.5)
	wend
	sleep(0.5)
	if !chkimg("../picture/ファミリアゲージ.bmp",1,0,0,1200,700) then KBD(VK_OEM_PLUS,0,500)
	while chkimg("../picture/ファミリアホーム.bmp",0,0,0,1000,500)
	KBD(VK_OEM_6,CLICK,500)
	sleep(0.5)
	wend
    result = 0;
   // result = MAPLE_RESULT_OK;
fend

//==========================================
// comment : メイプレージを使用する
// param   : None
// return  : 0 
//==========================================
function useMaprage()

    KBD(comKey.MAPLAGE_KEY,0,500)
    //TODO:5回以上使用したときの窓を閉じる処理
    result = MAPLE_RESULT_OK;
fend


//=========================================
// comment : テレポート職業限定　往復狩
// param   : None
// return  : 0 
//=========================================
//                                  攻撃キー         移動キー     黄点x起点    黄点y起点   黄点x終点   黄点y終点
function roundTripTeleportAttack( execKBD_Attack, execKBD_Move, yellowX_S, yellowY_S, yellowX_E, yellowY_E, );

    KBD(execKBD_Move,1,500);
    
    while true;
        KBD(execKBD_Attack,0,200);
        KBD(execKBD_Attack,0,200);
        KBD(VK_SPACE,0,200);
        KBD(VK_SPACE,0,200);
        if chkimg("../picture/黄点.bmp",0,yellowX_S,yellowY_S,yellowX_E,yellowY_E) then break;
    wend;

    KBD(execKBD_Move,2,500);

    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : 異常の確認
// param   : None
// return  : 0
//=========================================
public areaBossEncount = 0;
function urgentCheck()

    ifb  chkimg("../picture/エリボス.bmp",0,0,0,2000,2000)    	
        ifb areaBossEncount = 0 // 初回のみログを出す
            areaBossEncount = 1;
            logger.logWriter(LogLevel.LOG_WARN,"エリアボスを検出しました");
        else
            SOUND(" ");
        endif
    endif
    
    ifb  chkimg("../picture/緑点.bmp",0,0,0,1368,800)
        logger.logWriter(LogLevel.LOG_WARN,Messages.DISCOVERY_GREEN_POINT);
        exitexit;
    endif
    ifb chkimg("../picture/突発.bmp",0,0,0,1368,800);
        for i = 1 to 3
            BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,200);
        next
    endif
    if chkimg("../picture/talkEnd.bmp",0,0,0,1368,800) then BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,500);

    ifb chkimg("../picture/guild_member.bmp",0,0,0,300,300)
        logger.logWriter(LogLevel.LOG_WARN, "ギルドメンバーを検知しました。");
        alartSound();
    endif

    result = MAPLE_RESULT_OK; 
fend

//=========================================
// comment : 異常の確認 & エリボ出現時CC
// param   : None
// return  : 0
//=========================================
function UrgentCheckCCmode()

    ifb chkimg("../picture/runeNotice.bmp",0,0,0,1368,800)
        logger.logWriter(LogLevel.LOG_WARN, Messages.DETECTION_RUNE_NOTICE);
        ChannelChange(true);
    endif

    ifb  chkimg("../picture/エリボス.bmp",0,0,0,2000,2000)    	
        ifb areaBossEncount = 0 // 初回のみログを出す
            areaBossEncount = 1;
            logger.logWriter(LogLevel.LOG_WARN, Messages.DETECTION_AREA_BOSS);
            ChannelChange(true);
        else
            SOUND(" ");
            ChannelChange(true);
        endif
    endif
    
    ifb  chkimg("../picture/緑点.bmp",0,0,0,1368,800)
        logger.logWriter(LogLevel.LOG_WARN,Messages.DISCOVERY_GREEN_POINT);
        exitexit;
    endif
    ifb chkimg("../picture/突発.bmp",0,0,0,1368,800);
        for i = 1 to 3
            BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,200);
        next
    endif
    if chkimg("../picture/talkEnd.bmp",0,0,0,1368,800) then BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,500);

    result = MAPLE_RESULT_OK; 
fend

function DeadCheck()
    // ifb chkimg("../picture/Grave.bmp",0,0,0,1368,800);
    //     for i = 1 to 3
    //         BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,200);
    //     next
    // endif
    result = 0;
fend

//=========================================
//
// comment : メイプルをアクティブウィンドウにする
//           DisplayDpl : 可変対応           
//           2018/04/18 Ver3.68 対策済
// param   : None
// return  : 0
//
//=========================================
function activeWindow()

    
    mapleWindowID = GETID("MapleStory","MapleStoryClass");
    manager.WindowSize_X_MAX = ST_CLWIDTH;
    manager.WindowSize_Y_MAX = ST_CLHEIGHT;
    x = STATUS(mapleWindowID,ST_CLWIDTH) + 50;
    y = STATUS(mapleWindowID,ST_CLHEIGHT) + 50;
    //ウィンドウが左上(1,1)にあるなら移動させない
    ifb STATUS(mapleWindowID,ST_X) <> 1 AND STATUS(mapleWindowID,ST_Y) <> 1
        ACW(mapleWindowID,1,1);
        for i = 1 to 2
            BTN(LEFT,CLICK,x,y,500); 
            BTN(LEFT,CLICK,200,405,500);
            BTN(LEFT,CLICK,200,405,200);
        next
    else
        BTN(LEFT,CLICK,200,405,500);
    endif
    result = mapleWindowID;

fend

//=========================================
//
// comment : 画面サイズを返却する
// param   : None
// return  : 0
//
//=========================================
function getWindowSize()

    mapleWindowID = GETID("MapleStory","MapleStoryClass");
    size   = "1024x768";
    // 縦幅と横幅の取得
    width  = STATUS(mapleWindowID, ST_CLWIDTH)
    height = STATUS(mapleWindowID, ST_CLHEIGHT)
    ifb width = 800 AND height = 600
        size = "800x600"; 
    elseif width = 1024 AND height = 768
        size = "1024x768";
    elseif width = 1280 AND height = 720
        size = "1280x720";
    elseif width = 1366 AND height = 768
        size = "1366x768";
    endif
    
    result = size;
fend

//=========================================
//
// comment : 赤点チェック and 石化チェック
//           1366x800           
// param   : None
// return  : void
//
//=========================================

procedure urgentCheckAndRock()
    while true
        ifb chkimg("../picture/石化.bmp",0,0,0,1368,800)
            for x = 1 TO 20
                KBD(VK_LEFT,0,100)
                KBD(VK_RIGHT,0,100)
            next
        endif

        if chkimg("../picture/赤点.bmp",0,0,0,1368,800) then alartSound();
    wend
fend

//=========================================
//
// comment : 黄点チェックで左右移動
//           1366x800       
// param   : None
// return  : 0
//
//=========================================


function checkYelloPoint()
    ifb chkimg(picPathHelper("黄点"),0,0,0,60,160)
        KBD(VK_RIGHT,1,500)
        KBD(VK_RIGHT,2,800)
        exit
    endif

    ifb chkimg(picPathHelper("黄点"),0,90,130,130,160)
        KBD(VK_LEFT,1,500)
        KBD(VK_LEFT,2,800)
        exit
    endif   
    
    result = MAPLE_RESULT_OK; 
fend

//======================================================================================
// comment : ゲームマスターからの返答要求確認
//           1366x800       
// param   : None
// return  : MAPLE_RESULT_OK : 0
// 備考    : 次の順に判定を行う
//           1.チャット欄に「ご返答」が存在するか
//　         2.ハート拡声器ではないか
//           3.MiniMapに赤点があるか
//           上記条件が全て当てはまった場合返答処理を行う
//======================================================================================
function checkGameMaster()
    ifb chkimg("../picture/GMresponse/ご返答.bmp",1,55,600,420,780); //「ご返答」がチャット欄にあるか
        logger.logWriter(LogLevel.LOG_WARN,Messages.REPLY_REQUEST);
        ifb !chkimg("../picture/heart.bmp",0,5,600,400,780);   //ハート拡声器ではないか
            ifb chkimg("../picture/redpoint.bmp",0,10,85,250,250);   //ミニMAPに赤点が存在するか
                speak("ゲームマスターを検知しました")
                logger.logWriter(LogLevel.LOG_WARN,Messages.ENCOUNT_GAME_MASTER);
				//SendEmail()
                responseToGameMaster(getResponse()); //返答処理

                //initChat(); //チャット欄初期化
            else //赤点がなかった時はチャット欄を初期化
                logger.logWriter(LogLevel.LOG_INFO,Messages.NOT_RED_POINT);
                initChat();
            endif
        else
            initChat(); //GMではない場合チャット欄初期化
            logger.logWriter(LogLevel.LOG_WARN,Messages.HEART_SPEAKER);
        endif
    else
        exit;
    endif


	TimeOver = GETTIME( 30 / 86400 )
	while true
	
		while true
			if chkimg("../picture/GMresponse/お手数.bmp",1,55,600,420,780) then break
			if GETTIME() > TimeOver then break 2
			if chkimg("../picture/GMresponse/引き続き.bmp",1,55,600,420,780) then break 2
			sleep(1)
		wend
		
		logger.logWriter(LogLevel.LOG_WARN,Messages.TROUBLE_REQUEST);	
		waitNextQuestion()
	

	wend

    //追加質問返答チェック
    //isNextResponse = false;
    //while !isNextResponse
      //  logger.logWriter(LogLevel.LOG_WARN,Messages.WAIT_NEXT_RESPONSE);
       // isNextResponse = waitNextQuestion();
    //wend

    result = MAPLE_RESULT_OK;
fend

//======================================================================================
// comment : ゲームマスターからの追加質問返答確認
// param   : None
// return  : MAPLE_RESULT_OK_BOOL : true
// 備考    : "引き続き、メイプルストーリーをお楽しみください"が表示されるまで質問に返答する。
//======================================================================================
function waitNextQuestion()

	TimeOverB = GETTIME( 22 / 86400 )
   // isNextQuestion = true;
    while true // isNextQuestion
	
            //質問内容解析後、返答を行う。
            responseQuestion( checkQuestionAnalysis() );

        sleep(1);

	
        if chkimg("../picture/GMresponse/引き続き.bmp",1,55,600,420,780) then break
		if GETTIME() > TimeOverB then break 
            //isNextQuestion = false; // 引き続き、メイプルストーリーをお楽しみください。

			
        sleep(1);
    wend

    result = MAPLE_RESULT_OK_BOOL;
	
fend

//======================================================================================
// comment : どんな質問なのかを解析する
// param   : None
// return  : qustionNo : 質問No
// 備考    : TODO:質問のバリエーション
//======================================================================================
function checkQuestionAnalysis()
    questionNo = 0;
    //念のため5回ループして質問内容を確認
    for i = 1 to 2
       if chkimg("../picture/GMresponse/現在.bmp",1,55,600,420,780) and _
		  chkimg("../picture/GMresponse/タイトル.bmp",1,55,600,420,780) and _
		  chkimg("../picture/GMresponse/カタカナ.bmp",1,55,600,420,780) then questionNo = 1;
       if chkimg("../picture/GMresponse/現在.bmp",1,55,600,420,780) and _
	      chkimg("../picture/GMresponse/タイトル.bmp",1,55,600,420,780) and _
	      chkimg("../picture/GMresponse/ひらがな.bmp",1,55,600,420,780) then questionNo = 2;
	   if chkimg("../picture/GMresponse/現在.bmp",1,55,600,420,780) and _
	      chkimg("../picture/GMresponse/運営会社.bmp",1,55,600,420,780) and _
	      chkimg("../picture/GMresponse/カタカナ.bmp",1,55,600,420,780) then questionNo = 3;
	   if chkimg("../picture/GMresponse/現在.bmp",1,55,600,420,780) and _
	      chkimg("../picture/GMresponse/運営会社.bmp",1,55,600,420,780) and _
	      chkimg("../picture/GMresponse/ひらがな.bmp",1,55,600,420,780) then questionNo = 4;
	   if chkimg("../picture/GMresponse/現在.bmp",1,55,600,420,780) and _
	      chkimg("../picture/GMresponse/サーバー.bmp",1,55,600,420,780) and _
	      chkimg("../picture/GMresponse/カタカナ.bmp",1,55,600,420,780) then questionNo = 5;
	   if chkimg("../picture/GMresponse/現在.bmp",1,55,600,420,780) and _
	      chkimg("../picture/GMresponse/サーバー.bmp",1,55,600,420,780) and _
	      chkimg("../picture/GMresponse/ひらがな.bmp",1,55,600,420,780) then questionNo = 6;
	   ifB chkimg("../picture/GMresponse/午前午後.bmp",1,55,600,420,780) and _
			chkimg("../picture/GMresponse/漢字.bmp",1,55,600,420,780)
	        gettime() 
			ifb G_TIME_HH < 12 
			    questionNo = 7;	 
			else
			    questionNo = 8;
			endif
       endif
	   if chkimg("../picture/GMresponse/今日.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/何曜日.bmp",1,55,600,420,780) then questionNo = 9;	   
	   if chkimg("../picture/GMresponse/明日.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/何曜日.bmp",1,55,600,420,780) then questionNo = 10;	  
	   if chkimg("../picture/GMresponse/キャラ.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/最初.bmp",1,55,600,420,780) then questionNo = 11;	   
	   if chkimg("../picture/GMresponse/キャラ.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/最後.bmp",1,55,600,420,780) then questionNo = 12;	  
	   if chkimg("../picture/GMresponse/キャラ.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/合計.bmp",1,55,600,420,780) then questionNo = 13;	 	
	   if chkimg("../picture/GMresponse/今日.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/何月何日.bmp",1,55,600,420,780) then questionNo = 14;	
	   if chkimg("../picture/GMresponse/明日.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/何月何日.bmp",1,55,600,420,780) then questionNo = 15;
	   if chkimg("../picture/GMresponse/昨日.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/何曜日.bmp",1,55,600,420,780) then questionNo = 16;	
	   if chkimg("../picture/GMresponse/昨日.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/何月何日.bmp",1,55,600,420,780) then questionNo = 17;	
	   if chkimg("../picture/GMresponse/今月.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/何月.bmp",1,55,600,420,780) then questionNo = 18;		
	   if chkimg("../picture/GMresponse/今日.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/何日.bmp",1,55,600,420,780) then questionNo = 19;		   
	   if chkimg("../picture/GMresponse/昨日.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/何日.bmp",1,55,600,420,780) then questionNo = 20;		
	   if chkimg("../picture/GMresponse/明日.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/何日.bmp",1,55,600,420,780) then questionNo = 21;			   
	   if chkimg("../picture/GMresponse/先月.bmp",1,55,600,420,780) or _
	   chkimg("../picture/GMresponse/昨月.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/何月.bmp",1,55,600,420,780) then questionNo = 22;
	   if chkimg("../picture/GMresponse/来月.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/何月.bmp",1,55,600,420,780) then questionNo = 23;	
	   ifB chkimg("../picture/GMresponse/午前午後.bmp",1,55,600,420,780) and _
			chkimg("../picture/GMresponse/ひらがな.bmp",1,55,600,420,780)
	   gettime() 
			ifb G_TIME_HH < 12 
			questionNo = 24;	 
			else
			questionNo = 25;
			endif
       endif	
	   ifB chkimg("../picture/GMresponse/午前午後.bmp",1,55,600,420,780) and _
			chkimg("../picture/GMresponse/カタカナ.bmp",1,55,600,420,780)
	   gettime() 
			ifb G_TIME_HH < 12 
			questionNo = 26;	 
			else
			questionNo = 27;
			endif
       endif	
	   if chkimg("../picture/GMresponse/キャラ.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/職業.bmp",1,55,600,420,780) then questionNo = 28;	
	   if chkimg("../picture/GMresponse/キャラ.bmp",1,55,600,420,780) and _
	   chkimg("../picture/GMresponse/レベル.bmp",1,55,600,420,780) then questionNo = 29;

       if chkimg("../picture/GMresponse/キャラ.bmp",1,55,600,420,780) then questionNo = 30;
	   
       if chkimg("../picture/GMresponse/いくつか.bmp",1,55,600,420,780) then questionNo = 99; 
 //質問内容が追加されたらここに追加。questionNoをインクリメントしてください。
    next
    ifb questionNo<> 0 
	   isGM = true;
	endif
    result = questionNo;
fend


//======================================================================================
// comment : 質問に合わせて返答内容を変えて返答する
// param   : 質問No
// return  : MAPLE_RESULT_OK : 0
// 備考    : responseToGameMasterメソッドを呼び出して返答する。
//           メッセージ内容はメッセージクラスのanswer配列から取得する。
//======================================================================================
function responseQuestion(questionNo)
    select questionNo
        case 1
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseA] );
	    case 2
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseB] );
	    case 3
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseC] );	
        case 4
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseD] );
	    case 5
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseE] );
	    case 6
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseF] );
	    case 7
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseG] );
	    case 8
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseH] );		
	    case 9
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseI] );	
	    case 10
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseJ] );	
	    case 11
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseK] );	
	    case 12
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseL] );		
	    case 13
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseM] );	
	    case 14
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseN] );	
	    case 15
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseO] );	
	    case 16
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseP] );
	    case 17
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseQ] );	
	    case 18
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseR] );		
	    case 19
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseS] );	
	    case 20
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseT] );
	    case 21
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseU] );			   
	    case 22
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseV] );
	    case 23
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseW] );
	    case 24
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseX] );
	    case 25
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseY] );
	    case 26
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseZ] );
	    case 27
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseAA] );	
	    case 28
            characterLevel = getCharacterLevel()
            responseToGameMaster( characterLevel );	
	    case 29
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.Auto_ResponseAC] );
        case 30
            responseToGameMaster( getNowChannel() );
        case 99
            responseToGameMaster( GameMasterQuestionCalc() );		
        default
		
            //TODO
    selend 
	
    result = MAPLE_RESULT_OK;
fend 

// GMの計算問題を計算する
function GameMasterQuestionCalc()
        
    firstNumber   = 0
    firstNumberX  = 0
    secondNumber  = 0
    secondNumberX = 0

    BTN(LEFT,CLICK,300,150,200);
	
	chkimg("../picture/GMresponse/いくつか.bmp",1,55,600,420,780)
	Xa = g_img_x
	Ya = g_img_y
	
    ifb CHKIMG("../picture/GMresponse/4.bmp",1,Xa-52,Ya-3,Xa-13,Ya+12)
        firstNumber = 4
        firstNumberX = G_IMG_X
        firstNumberY = G_IMG_Y
    endif

    ifb firstNumber = 0
        ifb CHKIMG("../picture/GMresponse/8.bmp",1,Xa-52,Ya-3,Xa-13,Ya+12)
            firstNumber = 8
            firstNumberX = G_IMG_X
            firstNumberY = G_IMG_Y
        
        endif
    endif

    ifb firstNumber = 0
        ifb CHKIMG("../picture/GMresponse/9.bmp",1,Xa-52,Ya-3,Xa-13,Ya+12)
            firstNumber = 9
            firstNumberX = G_IMG_X
            firstNumberY = G_IMG_Y
        
        endif
    endif

    ifb firstNumber = 0
        ifb CHKIMG("../picture/GMresponse/1.bmp",1,Xa-52,Ya-3,Xa-13,Ya+12)
            firstNumber = 1
            firstNumberX = G_IMG_X
            firstNumberY = G_IMG_Y
        endif
    endif

    ifb firstNumber = 0
        ifb CHKIMG("../picture/GMresponse/2.bmp",1,Xa-52,Ya-3,Xa-13,Ya+12)
            firstNumber = 2
            firstNumberX = G_IMG_X
            firstNumberY = G_IMG_Y
        
        endif
    endif

    ifb firstNumber = 0
        ifb CHKIMG("../picture/GMresponse/3.bmp",1,Xa-52,Ya-3,Xa-13,Ya+12)
            firstNumber = 3
            firstNumberX = G_IMG_X
            firstNumberY = G_IMG_Y
        
        endif
    endif

    ifb firstNumber = 0
        ifb CHKIMG("../picture/GMresponse/5.bmp",1,Xa-52,Ya-3,Xa-13,Ya+12)
            firstNumber = 5
            firstNumberX = G_IMG_X
            firstNumberY = G_IMG_Y
        
        endif
    endif

    ifb firstNumber = 0
        ifb CHKIMG("../picture/GMresponse/6.bmp",1,Xa-52,Ya-3,Xa-13,Ya+12)
            firstNumber = 6
            firstNumberX = G_IMG_X
            firstNumberY = G_IMG_Y
        endif
    endif

    ifb firstNumber = 0
        ifb CHKIMG("../picture/GMresponse/7.bmp",1,Xa-52,Ya-3,Xa-13,Ya+12)
            firstNumber = 7
            firstNumberX = G_IMG_X
            firstNumberY = G_IMG_Y
        endif
    endif

print firstNumber
print firstNumberX
print firstNumberY


    ifb CHKIMG("../picture/GMresponse/4.bmp",1,firstNumberX+6,Ya-3,Xa-13,Ya+12)
        secondNumber = 4
        secondNumberX = G_IMG_X
        secondNumberY = G_IMG_Y
    endif

    ifb secondNumber = 0
        ifb CHKIMG("../picture/GMresponse/8.bmp",1,firstNumberX+6,Ya-3,Xa-13,Ya+12)
            secondNumber = 8
            secondNumberX = G_IMG_X
            secondNumberY = G_IMG_Y
        endif
    endif

    ifb secondNumber = 0
        ifb CHKIMG("../picture/GMresponse/9.bmp",1,firstNumberX+6,Ya-3,Xa-13,Ya+12)
            secondNumber = 9
            secondNumberX = G_IMG_X
            secondNumberY = G_IMG_Y
        endif
    endif

    ifb secondNumber = 0
        ifb CHKIMG("../picture/GMresponse/1.bmp",1,firstNumberX+6,Ya-3,Xa-13,Ya+12)
            secondNumber = 1
            secondNumberX = G_IMG_X
        endif
    endif

    ifb secondNumber = 0
        ifb CHKIMG("../picture/GMresponse/2.bmp",1,firstNumberX+6,Ya-3,Xa-13,Ya+12)
            secondNumber = 2
            secondNumberX = G_IMG_X
        endif
    endif

    ifb secondNumber = 0
        ifb CHKIMG("../picture/GMresponse/3.bmp",1,firstNumberX+6,Ya-3,Xa-13,Ya+12)
            secondNumber = 3
            secondNumberX = G_IMG_X
        endif
    endif

    ifb secondNumber = 0
        ifb CHKIMG("../picture/GMresponse/5.bmp",1,firstNumberX+6,Ya-3,Xa-13,Ya+12)
            secondNumber = 5
            secondNumberX = G_IMG_X
        endif
    endif

    ifb secondNumber = 0
        ifb CHKIMG("../picture/GMresponse/6.bmp",1,firstNumberX+6,Ya-3,Xa-13,Ya+12)
            secondNumber = 6
            secondNumberX = G_IMG_X
        endif
    endif

    ifb secondNumber = 0
        ifb CHKIMG("../picture/GMresponse/7.bmp",1,firstNumberX+6,Ya-3,Xa-13,Ya+12)
            secondNumber = 7
            secondNumberX = G_IMG_X
        endif
    endif
	
print secondNumber
print G_IMG_X
print G_IMG_Y

    result = firstNumber + secondNumber
fend

function getNowChannel()

    // ch変更ショートカットキー
    KBD(VK_F7,0,500)
    
    ch = 1;
    // pictureフォルダの中にchannelフォルダ作ってその中に画像入れとく
    // Ex:画像名は 1chであれば 1.bmp 16chだったら　16.bmp
    GETDIR("../picture/channel/", "*.bmp", false, 0);
    for i = ch to length(GETDIR_FILES)
        ifb chkimg("../picture/channel/" + ch + ".bmp")
            break;
        else
            ch = ch + 1
        endif
    next
    KBD(VK_ESC,0,500)
    // ここで返したいメッセージ設定してもいいかな
    result = ch
fend

//======================================================================================
// comment : ゲームマスターからの返答要求に使用
//           する文字列をランダムで取得
//           1366x800       
// param   : None
// return  : responseStr : 返却文字列
//======================================================================================
function getResponse()
    //返答用の文字列初期化
    responseStr = ResponseMessages.RESPONSE_STR;
    //ランダムで返答用の文字列を取得
    num = random(length(ResponseMessages.resMessages) - 1); // ArraySize - 1
    responseStr = ResponseMessages.resMessages[num];
    //応答文字列返却
    result = responseStr;
fend


//=========================================
// comment : ゲームマスターからの返答要求に返答
//           1366x800       
// param   : 応答文字列
// return  : 0
//=========================================
function responseToGameMaster(responseStr)

    logger.logWriter(LogLevel.LOG_WARN, Messages.RESPONSE_MESSAGE);
    logger.logWriter(LogLevel.LOG_INFO, "返答MSG:" + responseStr);
    KBD(VK_1,0,500);
    SendStr(0,responseStr,1,True);
    KBD(VK_CTRL,1,600);
    KBD(VK_V,0,600);
    KBD(VK_CTRL,2,100);
    KBD(VK_ENTER,0,500);
    BTN(LEFT,CLICK,300,150,200);
    BTN(LEFT,CLICK,300,150,200);
    ifb isGM
       initChat();
       isGM = false;
    endif
    result = MAPLE_RESULT_OK; 
fend

//=========================================
// comment : Gメール送信用
//                  
// param   : None
// return  : 
//=========================================
function SendEmail()

id = GETID("MapleStory","MapleStoryClass")
SAVEIMG("screenshot", id,0,600,410,200, , 70) 

//添付画像ファイルまでのディレクトリ(メール添付にはフルパスが必要)
tempfile = GET_CUR_DIR + "\screenshot.jpg" //GET_CUR_DIR 実行ファイルがあるディレクトリ

//CDOメール送信部分(Gmailを使っています)
Dim objEmail = CreateOleObj("CDO.Message")

//メールの内容
objEmail.From = "xxxxxx" //送信元メールアドレス
objEmail.To = "xxxxxx"　　//送信先メールアドレス
objEmail.Subject = "GMきたんご" //件名
objEmail.Textbody = "ノート1"　//本文
objEmail.AddAttachment (tempfile) //添付ファイルはフルパスを指定する

Schemas = "http://schemas.microsoft.com/cdo/configuration/"
objEmail.Configuration.Fields.Item(Schemas + "sendusing") = 2
objEmail.Configuration.Fields.Item(Schemas + "smtpserver") = "smtp.googlemail.com"

objEmail.Configuration.Fields.Item(Schemas + "smtpserverport") = 465 //ポート番号
objEmail.Configuration.Fields.Item(Schemas + "smtpauthenticate") = True
objEmail.Configuration.Fields.Item(Schemas + "sendusername") = "xxxxxx" //ログインID
objEmail.Configuration.Fields.Item(Schemas + "sendpassword") = "xxxxxx" //パスワード
objEmail.Configuration.Fields.Item(Schemas + "smtpusessl") = True

objEmail.Configuration.Fields.Update

objEmail.Send

    result = 0;

Fend



//=========================================
// comment : ♡拡声器が見えたらチャットを初期化する
//           1366x800       
// param   : None
// return  : 0
//=========================================
function initChat()

    logger.logWriter(LogLevel.LOG_INFO,Messages.INIT_CHAT);
    CHAT_INIT_CMD = "/?";

    KBD(VK_1,0,1000)
    SendStr(0,CHAT_INIT_CMD,1,True)
    KBD(VK_CTRL,1,1000)
    KBD(VK_V,0,1000)
    KBD(VK_CTRL,2,100)
    KBD(VK_ENTER,0,500)
    BTN(LEFT,CLICK,300,150,200);
    BTN(LEFT,CLICK,300,150,200);
    result = MAPLE_RESULT_OK; 
fend

//=========================================
//
// comment : 石化チェック・赤点チェック・加護チェック
// param   : None
// return  : 0 
//
//=========================================
procedure parallelProgram()
    while TRUE
        ifb chkimg("../picture/石化2.bmp",0,0,0,1368,800)
            for i = 1 to 20
                KBD(VK_LEFT,0,100);
                KBD(VK_RIGHT,0,100);
            next
        endif

        if chkimg("../picture/加護.bmp",0,0,0,1368,800) then KBD(VK_F4,0,1000)

        ifb chkimg("../picture/赤点.bmp",0,0,0,1368,800)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            alartSound();  
        endif   

        ifb chkimg("../picture/redpoint2.bmp",0,0,0,200,200)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            alartSound();
        endif   

        ifb chkimg("../picture/緑点.bmp",0,0,0,1368,800)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DISCOVERY_GREEN_POINT);
            exitexit;
        endif
    wend
fend

procedure parallelProgram_Gmember()
    while TRUE
        ifb chkimg("../picture/石化2.bmp",0,0,0,1368,800)
            for i = 1 to 20
                KBD(VK_LEFT,0,100);
                KBD(VK_RIGHT,0,100);
            next
        endif

        if chkimg("../picture/加護.bmp",0,0,0,1368,800) then KBD(VK_F4,0,1000)

        ifb chkimg("../picture/赤点.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            alartSound();  
        endif   

        ifb chkimg("../picture/redpoint2.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            alartSound();
        endif   

        ifb chkimg("../picture/緑点.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DISCOVERY_GREEN_POINT);
            exitexit;
        endif

        ifb chkimg("../picture/guild_member.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN, "ギルドメンバーを検知しました。");
            alartSound();
        endif 
    wend
fend

procedure parallelProgramExitMode()
    thread lib.RegularOnClick();
    while TRUE
        if chkimg("../picture/加護.bmp",0,0,0,1368,800) then KBD(VK_F4,0,1000)

        ifb chkimg("../picture/赤点.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            screenShot();
            killMapleStory();
            loginMapleStory();
            //alartSound();
        endif

        ifb chkimg("../picture/redpoint2.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            screenShot();
            killMapleStory();
            loginMapleStory();
            //alartSound();
        endif 

        ifb  chkimg("../picture/緑点.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DISCOVERY_GREEN_POINT);
            exitexit;
        endif
    wend
fend

procedure parallelProgramExitMode_Gmember()
    thread lib.RegularOnClick();
    while TRUE
        ifb chkimg("../picture/石化2.bmp",0,0,0,1368,800)
            for i = 1 to 20
                KBD(VK_LEFT,0,100);
                KBD(VK_RIGHT,0,100);
            next
        endif

        if chkimg("../picture/加護.bmp",0,0,0,1368,800) then KBD(VK_F4,0,1000)

        ifb chkimg("../picture/赤点.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            screenShot();
            killMapleStory();
            loginMapleStory();
            //alartSound();
        endif

        ifb chkimg("../picture/redpoint2.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            screenShot();
            killMapleStory();
            loginMapleStory();
            //alartSound();
        endif 

        ifb chkimg("../picture/guild_member.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN, "ギルドメンバーを検知しました。");
            screenShot();
            killMapleStory();
            loginMapleStory();
            //alartSound();
        endif 

        ifb  chkimg("../picture/緑点.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DISCOVERY_GREEN_POINT);
            exitexit;
        endif
    wend
fend


procedure parallelProgramWaitMode()
    while TRUE
        ifb chkimg("../picture/石化2.bmp",0,0,0,1368,800)
            for i = 1 to 20
                KBD(VK_LEFT,0,100);
                KBD(VK_RIGHT,0,100);
            next
        endif

        if chkimg("../picture/加護.bmp",0,0,0,1368,800) then KBD(VK_F4,0,1000)

        ifb chkimg("../picture/赤点.bmp",0,0,0,1368,800)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            thread alartSound();
            exitexit;
        endif
        
        ifb chkimg("../picture/redpoint2.bmp",0,0,0,800,600)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            thread alartSound();
            exitexit;
        endif 

        ifb  chkimg("../picture/緑点.bmp",0,0,0,1368,800)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DISCOVERY_GREEN_POINT);
            exitexit;
        endif
    wend
fend

//=========================================
// comment : 赤点があるかどうかをチェックする
// param   : None
// return  : true or false
// 備考    : None
//=========================================
function isRedPoint()

        isEncount = false;
        //ifb chkimg("../picture/赤点.bmp",0,0,0,1368,800) || ifb chkimg("../picture/redpoint2.bmp",0,0,0,800,600)
        //    isEncount = true;
        //endif

        result = isEncount;
fend

//=========================================
// comment : 画像認識用パスヘルパー
// param   : ファイル名
// return  : 0
// 備考    : ../picture/fileName.bmp を返却
//=========================================
function picPathHelper(fileName)
    result = PIC_PATH + fileName + ".bmp";
fend

//=========================================
// comment : メイプルが起動されていなければ終了
// param   : None
// return  : 0
// 備考    : windowIDが -1 であれば起動されてない
//=========================================
function checkStartingMapleStory()
    windowID = GETID("MapleStory","MapleStoryClass")
    
    ifb windowID < 0;
        logger.logWriter(LogLevel.LOG_ERROR,Messages.STOP_MAPLE_MESSAGE);
        while true
            speak("メイプルストーリーが起動していません")
            sleep(3);
        wend
    endif
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : メイプルが起動されていなければ
//           1回のみログを出力
// param   : None
// return  : 0
// 備考    : windowIDが -1 であれば起動されてない
//=========================================
public startingLogCount = 0;
function checkStartingMapleStoryOutputLog()
    windowID = GETID("MapleStory","MapleStoryClass")
    ifb windowID < 0  and startingLogCount = 0;
        startingLogCount = 1;
        logger.logWriter(LogLevel.LOG_ERROR,Messages.STOP_MAPLE_MESSAGE);
    endif
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : 警告時のサウンド通知
// param   : None
// return  : 0
//=========================================
function alartSound()
    for i = 1 to 20
        SOUND(" ");
        sleep(0.2);
    next
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : メモリ解放
// param   : None
// return  : 0
//=========================================
function memoryRelease()
    memoryReleaseCommand = "empty.exe *"; 
    DOSCMD(memoryReleaseCommand);
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : スクリーンショット保存
// param   : None
// return  : 0 
//=========================================
function screenShot()
    //現在日時を名前にして保存する
    SAVEIMG(SCREEN_SHOT_SAVE_DIR + getNowDateTime(),0);
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : 現在日時(ミリ秒まで)を取得する
// param   : None
// return  : YYYYMMDDHHNNSSZZ
//=========================================
function getNowDateTime()
    GETTIME();
    result = G_TIME_YY4 + G_TIME_MM2 + G_TIME_DD2 + _ //YYYYMMDD
             G_TIME_HH2 + "_" + G_TIME_NN2 + "_" + G_TIME_SS2 + "_" + _ //HHNNSS
             G_TIME_ZZ2;                              //ZZ
fend

//=========================================
// comment : メイプルストーリーを起動する
// param   : None
// return  : 0
//=========================================
function execMapleStory()
    logger.logWriter(LogLevel.LOG_INFO, "MapleStoryを起動します");
    DOSCMD(MAPLE_STORY_EXE_DIR,TRUE,FALSE)
    sleep(10);
    id = GETID("MapleStory","StartUpDlgClass");
    while true
        CLKITEM(id,"Play!");
        sleep(1);
        if GETID("MapleStory","StartUpDlgClass") = -1 then break;
    wend
    result = MAPLE_RESULT_OK;
fend



//=========================================
// comment : メイプルストーリーを終了する
// param   : None
// return  : 0
//=========================================
function killMapleStory()
    cmd = "taskkill /F /IM MapleStory.exe";
    DOSCMD(cmd,TRUE,FALSE);
    //logger.logWriter(LogLevel.LOG_ERROR,Messages.TASK_KILL_MESSAGE);
    SLEEP(5)
    //execMapleStory(); // 再起動
    result = MAPLE_RESULT_OK;
fend

function IsLoginDisp()
    result = chkimg(lib.picPathHelper("StartButton"),0,0,0,1366,768)
fend

function limit()
    num = 300 + random(300)
    t = GETTIME( num / 86400 )
    while true
        ifb t < GETTIME()
            killMapleStory();
            break
        else
            sleep(10)
        endif
    wend
    result = 0;
fend

//=========================================
// comment : Microsoft Edgeを終了する
//           ※スレッドで実施用※
// param   : None
// return  : 0
//=========================================
function KillMicrosoftEdge()
    logger.logWriter(LogLevel.LOG_INFO, "Microsoft Edge kill thread.");
    while true
        cmd = "taskkill /F /IM MicrosoftEdge.exe";
        DOSCMD(cmd,TRUE,FALSE);
        //logger.logWriter(LogLevel.LOG_ERROR, "Microsoft Edgeを終了しました");
        //SLEEP(5)
        //execMapleStory(); // 再起動
        sleep(30);
    wend
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : ログインする
// param   : None
// return  : 0
//=========================================
function loginMapleStory()
    while true
        sleep(1);
        if IsLoginDisp() then break;
    wend
    lib.activeWindow();
    sleep(3);
    lib.LoginEntry();
    result = MAPLE_RESULT_OK;
fend

function LoginEntry()

    // 1次パス取得
    //firstPassword = READINI("Password","PW",LOGIN_INFO_INI_PATH);
    firstPassword = MAPLE_LOGIN_PW;
    print "fp:"+firstPassword;
    SENDSTR(0, firstPassword);
    // 入力文字の削除
    for i = 1 to 20
        KBD(VK_RIGHT,0,200)
    next
    for i = 1 to 15
        KBD(VK_BACK,0,200)
    next
    // パス貼り付け
    KBD(VK_CTRL,1,1000);
    KBD(VK_V,0,1000);
    KBD(VK_CTRL,2,100);
    // ログイン
    KBD(VK_ENTER,0,1000);
    sleep(10);
    KBD(VK_ENTER,0,1000);
    ChannelSelect();
    // キャラクター選択
    print "char click"
    KBD(VK_ENTER,0,2000)
    KBD(VK_ENTER,0,2000)
    // 2次パス取得
    //secondPassword = READINI("SecondPassword","PW",LOGIN_INFO_INI_PATH);
    secondPassword = SECOND_PW;
    spLength = length(secondPassword);
    print secondPassword;
    dim passArray[spLength-1];
    for i = 1 to spLength
        passArray[i-1] = COPY(secondPassword,i,1);
        print passArray[i-1];
    next
    // 2次パス画像クリック
    for i = 1 to spLength
        ifb chkimg("../picture/2ndPasskey/" + passArray[i-1] + ".bmp",0,0,0,1366,768)
             BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,500);
             BTN(LEFT,CLICK,100,30,500);
        endif
    next
    ifb chkimg(lib.picPathHelper("2ndPWOK"),0,0,0,1366,768)
        for i = 1 to 2
            BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,300);
        next
    endif

    result = 0;
fend

function ChannelSelect()
    logger.logWriter(LogLevel.LOG_INFO, "チャンネルを選択します");
    ch = RANDOM(16)
    for i = 0 to ch
        KBD(VK_RIGHT,0,150);
    next
    KBD(VK_ENTER,0,1000);
    mes = (ch + 2) + "chにログインします" ;
    logger.logWriter(LogLevel.LOG_INFO, mes);
    sleep(5);
    result = 0;
fend

//=========================================
// comment : 指定時間待機する
// param   : None
// return  : 0
//=========================================
function wait(sleepTime)

    counter = 1;
    //待機秒ログ出力
    message = sleepTime + Messages.STOP_MAPLE_MESSAGE;
    logger.logWriter(LogLevel.LOG_INFO,message);
    //待機処理
    for i = 1 to sleepTime
        sleep(1)
        print counter + "秒待機しました";
        counter = counter + 1;
    next
    print sleepTime + "秒経過しました。待機を終了します。"
    counter = 1;
    result = 0;

fend

//=========================================
// comment : 職業別ログ出力先フォルダを取得する
// param   : None
// return  : 0
//=========================================
function getOutputDirectory()

    currentDirectory = GET_CUR_DIR
    outputDirectory = ""

    re = CreateOleObj("VBScript.RegExp")
    re.pattern = "([^\\]+?)?$" //正規表現パターン。1と5の間の文字を取り出す。
    re.Global = True //文字列全体を検索。trueでする(規定)、falseでしない(マッチしたらそこで終了)。
    re.IgnoreCase = True //大文字・小文字を区別。trueでしない(規定)、falseでする。
    match = re.Execute(currentDirectory)

    //マッチしたものをすべて出力
    for i = 0 To match.Count - 1
        outputDirectory = outputDirectory + match.Item(i).Value
    next

    result = outputDirectory;
fend

//=========================================
// comment : チャンネル変更
// param   : $1 : ルーンのチェックを行うか
// return  : 0
//=========================================
function ChannelChange(isRuneCheck)

    while true
        ret = CCexec();
        ifb ret = 0 and isRuneCheck
            while true
                if chkimg(lib.picPathHelper("yellowPoint"),0,0,0,250,300) then break;
            wend
            ifb chkimg(lib.picPathHelper("runePoint"),0,0,0,250,300) _
              or _
            chkimg(lib.picPathHelper("RuneNotice"),0,0,0,1366,768)
                logger.logWriter(LogLevel.LOG_WARN,Messages.CHANNEL_CHANGE_DET_RUNE);
            elseif chkimg(lib.picPathHelper("guild_member"),0,0,0,250,300)
                logger.logWriter(LogLevel.LOG_WARN, "ギルドメンバーを検知しました。");
                continue;
            elseif chkimg(lib.picPathHelper("friend_point"),0,0,0,250,300)
                logger.logWriter(LogLevel.LOG_WARN, "フレンドを検知しました。");
                continue;
            else
                break;
            endif
        else
            break;
        endif
    wend

    result = 0;

fend

//=========================================
// comment : チャンネル変更内部処理
// param   : None
// return  : 0
//=========================================
function CCexec()

    ret = MAPLE_RESULT_OK;
	// 初期化
    while true
        BTN(LEFT,CLICK,200,405,500);
        BTN(LEFT,CLICK,200,405,200);
        KBD(VK_ESC,0,500);
        // ポップアップチェック
        SLEEP(0.5)
        ifb chkimg("../picture/ConfirmButton.bmp",0,0,0,1368,800);
            BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,1000);
        endif
        KBD(VK_ENTER,0,1000);
        KBD(VK_LEFT,0,800);
        KBD(VK_ENTER,0,2500);
        // 今はできませんチェック
        SLEEP(1)
        ifb chkimg("../picture/ConfirmButton.bmp",0,0,0,1368,800);
            logger.logWriter(LogLevel.LOG_WARN,Messages.CHANNEL_CHANGE_FAIL);
            BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,1000);
            ret = MAPLE_RESULT_NG;
        else
            logger.logWriter(LogLevel.LOG_WARN,Messages.CHANNEL_CHANGE_SUCCESS);
            break;
        endif
    wend

    result = ret;
fend

//=========================================
// comment : チャンネル変更後待機し
//           他プレイヤーがいないか確認
// param   : None
// return  : 0
//=========================================
function checkPlayer()

	// 画面が完全に切り替わるまで待機
	// 他プレイヤーがいないか確認する
	while true
	    // いなければ戻る
       //if chkimg() break;
	    // いたらもう一度チャンネル変更
    wend    

    result = 0;
fend


//=========================================
// comment : ルーンの矢印を解析し入力する
// param   : None
// return  : 0
//=========================================
function OpenRune()

    moveRunePoint();
    CALL ChkimgRune.uws;
    
    result = 0;
fend

function OpenRuneA()

    moveRunePointA();
    CALL ChkimgRune.uws;
    
    result = 0;
fend



//=========================================
// comment : ルーンの矢印を解析し入力する
// param   : None
// return  : 0
//=========================================
function OpenRuneXY(x,y,isDown)

    moveRunePointXY(x,y);
    ifb isDown
        CALL ChkimgRuneDownJump.uws;
    elseif !isDown
        CALL ChkimgRune.uws;
    endif
    result = 0;
fend

//=========================================
// comment : ルーンの位置まで移動する
// param   : None
// return  : 0
//=========================================

function moveRunePoint()  // FJ用

    // ルーンの位置を取得
    runePointX = 0;
    runePointY = 0;
    ifb chkimg(lib.picPathHelper("runePoint"),0,0,0,250,200);
        runePointX = G_IMG_X;
        runePointY = G_IMG_Y;
    else
        print "ルーンの位置が取得できません";
        exit;
    endif
    
    // 黄点を取得
    yellowPointX = 0;
    yellowPointY = 0;
    ifb chkimg(lib.picPathHelper("yellowPoint"),0,0,0,250,200);
        yellowPointX = G_IMG_X;
        yellowPointY = G_IMG_Y;
    else
        print "黄点の位置が取得できません";
        result = 2;
    endif
        
    // 移動する方向を決定
    moveKey = VK_RIGHT
    ifb yellowPointX > runePointX
        moveKey = VK_LEFT
    endif
    
    moveErrTime = GETTIME(5/86400)
    // ルーンの横位置まで移動
    KBD(moveKey,1,100);

    while true

		while true
        	ifb chkimg(lib.picPathHelper("yellowPoint"),0, runePointX-45, 0, runePointX+45, 170)
        	    break;
       			 else
       		     ifb GETTIME() > moveErrTime
         	       break;
       		     endif
      		endif
        KBD(VK_SPACE,0,100)
		//kbd(vk_c,0,100)
		//kbd(vk_s,0,50)
		wend


        ifb chkimg(lib.picPathHelper("yellowPoint"),0, runePointX-5, 0, runePointX+5, 170)
            break;
        else
            ifb GETTIME() > moveErrTime
                break;
            endif
        endif  
    wend
    KBD(moveKey,2,50)
    
    result = 0;
fend


function moveRunePointA()  // テレポ用

    // ルーンの位置を取得
    runePointX = 0;
    runePointY = 0;
    ifb chkimg(lib.picPathHelper("runePoint"),0,0,0,250,200);
        runePointX = G_IMG_X;
        runePointY = G_IMG_Y;
    else
        print "ルーンの位置が取得できません";
        exit;
    endif
    
    // 黄点を取得
    yellowPointX = 0;
    yellowPointY = 0;
    ifb chkimg(lib.picPathHelper("yellowPoint"),0,0,0,250,200);
        yellowPointX = G_IMG_X;
        yellowPointY = G_IMG_Y;
    else
        print "黄点の位置が取得できません";
        result = 2;
    endif
        
    // 移動する方向を決定
    moveKey = VK_RIGHT
    ifb yellowPointX > runePointX
        moveKey = VK_LEFT
    endif
    
    moveErrTime = GETTIME(6/86400)
    // ルーンの横位置まで移動
    KBD(moveKey,1,100);

    while true

		while true
        	ifb chkimg(lib.picPathHelper("yellowPoint"),0, runePointX-25, 0, runePointX+25, 160)
        	    break;
       			 else
       		     ifb GETTIME() > moveErrTime
         	       break;
       		     endif
      		endif  
		kbd(VK_SPACE,0,100)
		wend


        ifb chkimg(lib.picPathHelper("yellowPoint"),0, runePointX-5, 0, runePointX+5, 160)
            break;
        else
            ifb GETTIME() > moveErrTime
                break;
            endif
        endif  
    wend
    KBD(moveKey,2,50)
    
    result = 0;
fend



//=========================================
// comment : ルーンの位置まで移動する
// param   : None
// return  : 0
//=========================================
function moveRunePointXY(x,y)

    // ルーンの位置を取得
    runePointX = x;
    runePointY = y;

    // 黄点を取得
    yellowPointX = 0;
    yellowPointY = 0;
    ifb chkimg(lib.picPathHelper("yellowPoint"),0,0,0,350,350);
        yellowPointX = G_IMG_X;
        yellowPointY = G_IMG_Y;
    else
        print "黄点の位置が取得できません";
        result = 2;
    endif
        
    // 移動する方向を決定
    moveKey = VK_RIGHT
    ifb yellowPointX > runePointX
        moveKey = VK_LEFT
    endif
    
    // ルーンの横位置まで移動
    KBD(moveKey,1,500);
    while true
        if chkimg(lib.picPathHelper("yellowPoint"),0, runePointX-5, 0, runePointX+5, 300) then break;  
    wend
    KBD(moveKey,2,10)
    
    result = 0;
fend

//=========================================
// comment : 定期的に画面をクリックする
//           ※必ずスレッドで呼び出すこと※
// param   : None
// return  : 0
//=========================================
function RegularOnClick()
    while true
        BTN(LEFT,CLICK,740,340,500);
        sleep(30);
    wend
    result = 0;
fend

//=========================================
// comment : CSVファイルからログイン情報を取得する
// param   : None
// return  : 0
//=========================================
function GetLoginInfo()
    fid = FOPEN(LOGIN_INFO_CSV_PATH , F_READ)
    MAPLE_STORY_EXE_DIR = FGET( fid, 1, 1 )
    MAPLE_LOGIN_PW      = FGET( fid, 1, 2 )
    SECOND_PW           = FGET( fid, 1, 3 )
   result = 0;
fend

//=========================================
// comment : グローバル変数にクイックスロットの
//           検出座標を設定する
// param   : $1 x1, $2: y1, $3:x2 , $4: y2
// return  : 0
//=========================================
function SetCoordinate(var x1, var y1, var x2, var y2)
    x1 = G_IMG_X - 1;
    x2 = G_IMG_X + 30;
    y1 = G_IMG_Y - 1;
    y2 = G_IMG_Y + 5;
    result = 0;
fend

//=========================================
// comment : テキストファイルに記載された
//　　　　　　キャラクターレベルを取得する
// return  : キャラクターレベル
//=========================================
function getCharacterLevel()
    fileName = "level"
    Dim wsh = CreateOLEObj("WScript.Shell")
    Dim file = wsh.SpecialFolders("desktop") + "\" + fileName + ".txt"
    id = FOPEN(file)
    level = FGET(id, 1)
    result = level
fend



//=========================================
// comment : 深夜の自動探知機回避
// param   : None
// return  : 0
//=========================================
function CheckAutoLieDetector()

    GETTIME()
    c = 0;
    ifb IsAutoLieDetectorTime()
        while true
            sleep(5);
            KBD(comKey.POINT_SHOP_KEY,0,1000);
            sleep(5);
            ifb chkimg(lib.picPathHelper("ConfirmButton"),0, 0, 0, 1366, 800)
                BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,1000);
            endif
            ifb chkimg(lib.picPathHelper("point_shop_now"),0, 0, 0, 300, 800)
                logger.logWriter(LogLevel.LOG_INFO, "ポイントショップに移動しました");
                sleep(300)
                logger.logWriter(LogLevel.LOG_INFO, "待機を終了しました");
                for i = 1 to 3
                    BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,400);
                next
                break;
            endif  
        wend
    endif
    result = 0;
fend

function IsAutoLieDetectorTime()
    GETTIME()
    ifb G_TIME_HH = 2 and G_TIME_NN > 6  and G_TIME_HH = 2 and G_TIME_NN < 10 or _
        G_TIME_HH = 3 and G_TIME_NN > 16 and G_TIME_HH = 3 and G_TIME_NN < 20 or  _
        G_TIME_HH = 4 and G_TIME_NN > 6  and G_TIME_HH = 4 and G_TIME_NN < 10 or _
        G_TIME_HH = 4 and G_TIME_NN > 41 and G_TIME_HH = 4 and G_TIME_NN < 45
        result = true;
    else
        result = false;
    endif
fend

function ExecPowerShell(cmd)
    DOSCMD("powershell -Command " + cmd)
    result = MAPLE_RESULT_OK;
fend

function ExpandQuickSlot()
    ws = getWindowSize()
    // ウィンドウサイズが800x600以外の時はクイックスロットを広げる
    ifb ws <> "800x600"
        // ポイントショップボタンがあれば広がってないと判定しクイックスロットを広げる
        ifb chkimg(lib.picPathHelper("point_shop_icon"),0, 0, 0, 1366, 800)
            KBD(comKey.QUICK_SLOT_KEY,0,500);
        endif
    endif

    result = MAPLE_RESULT_OK;
fend

ENDCLASS
