//=========================================
//
// comment     : MapleStory Utility
// param       : Nonef
// return      : None
// 
// Display Dpl : 1366x768 [only]
//
// Copy Right (C) 2018 All Right Reserved. 
//   @author k.kawabata @kawaken1025
//     Create Date : 2018/04/28
//=========================================

CALL ../Log/logWriter.uws;
CALL ../Common/Messages.uws;
CALL ../Common/CommonKeySetting.uws;
CALL ../MapleManagement/MapleManagement.uws;
CALL ../MapleAPI/api/v1/LogWriteAPI.uws;

public PIC_PATH             = "../picture/";
public SCREEN_SHOT_SAVE_DIR = "../picture/screen_shot/";
public MAPLE_STORY_EXE_DIR  = "\\192.168.10.107\MapleStory - コピー\MapleStory.exe";
public LOGIN_INFO_INI_PATH  = "C:\Users\sisyo\Documents\LoginInfo.ini";
public LOGIN_INFO_CSV_PATH  = "C:\LoginInfo.csv"
public MAPLE_RESULT_OK      = 0;
public MAPLE_RESULT_NG      = 1;
public MAPLE_RESULT_OK_BOOL = true;
public MAPLE_LOGIN_PW = "";
public SECOND_PW = "";

CLASS lib

function lib()
    try
        GetLoginInfo();
        ifb MAPLE_LOGIN_PW = "" and SECOND_PW = ""
            print "ログイン情報を取得できませんでした。"
        endif
    except
        print "ログイン情報を取得できませんでした。"
    endtry
    result = 0;
fend

//==========================================
// comment : ファミリアの気力が500以下であれば回復
// param   : None
// return  : 0 
//==========================================
function checkFamiliarPower()
    
    KBD(comKey.FAM_BOOK_KEY,0,300);
    SLEEP(1);
    ifb chkimg("../picture/fam40.bmp",0,335,590,360,620);
        KBD(comKey.FAM_RECOVERY_KEY,0,10);
        logger.logWriter(LogLevel.LOG_INFO,Messages.RECOVERY_FAMILIAR_POWER);
    endif
    KBD(comKey.FAM_BOOK_KEY,0,50);

    result = MAPLE_RESULT_OK;
fend

//==========================================
// comment : メイプレージを使用する
// param   : None
// return  : 0 
//==========================================
function useMaprage()

    KBD(comKey.MAPLAGE_KEY,0,500)
    //TODO:5回以上使用したときの窓を閉じる処理
    result = MAPLE_RESULT_OK;
fend


//=========================================
// comment : テレポート職業限定　往復狩
// param   : None
// return  : 0 
//=========================================
//                                  攻撃キー         移動キー     黄点x起点    黄点y起点   黄点x終点   黄点y終点
function roundTripTeleportAttack( execKBD_Attack, execKBD_Move, yellowX_S, yellowY_S, yellowX_E, yellowY_E, );

    KBD(execKBD_Move,1,500);
    
    while true;
        KBD(execKBD_Attack,0,200);
        KBD(execKBD_Attack,0,200);
        KBD(VK_SPACE,0,200);
        KBD(VK_SPACE,0,200);
        if chkimg("../picture/黄点.bmp",0,yellowX_S,yellowY_S,yellowX_E,yellowY_E) then break;
    wend;

    KBD(execKBD_Move,2,500);

    result = MAPLE_RESULT_OK;

    
fend

//=========================================
// comment : 異常の確認
// param   : None
// return  : 0
//=========================================
public areaBossEncount = 0;
function urgentCheck()

    ifb  chkimg("../picture/エリボス.bmp",0,0,0,2000,2000)    	
        ifb areaBossEncount = 0 // 初回のみログを出す
            areaBossEncount = 1;
            logger.logWriter(LogLevel.LOG_WARN, Messages.DETECTION_AREA_BOSS);
        else
            SOUND(" ");
        endif
    endif
    
    ifb  chkimg("../picture/緑点.bmp",0,0,0,1368,800)
        logger.logWriter(LogLevel.LOG_WARN, Messages.DISCOVERY_GREEN_POINT);
        exitexit;
    endif
    ifb chkimg("../picture/突発.bmp",0,0,0,1368,800);
        for i = 1 to 3
            BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,200);
        next
        logger.logWriter(LogLevel.LOG_INFO, Messages.GET_SUDEDN_MISSION);
    endif
    if chkimg("../picture/talkEnd.bmp",0,0,0,1368,800) then BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,500);

    result = MAPLE_RESULT_OK; 
fend

//=========================================
// comment : 異常の確認 & エリボ出現時CC
// param   : None
// return  : 0
//=========================================
public isEvent = false;
function UrgentCheckCCmode()

    ifb chkimg("../picture/runeNotice.bmp",0,0,0,1368,800)
        logger.logWriter(LogLevel.LOG_WARN, Messages.DETECTION_RUNE_NOTICE);
        ChannelChange(true);
    endif


    ifb chkimg("../picture/エリボス.bmp",0,0,0,1368,300) and !isEvent
        sleep(2)
        ifb !chkimg("../picture/glory_gauge_event.bmp",0,0,0,300,300)        
            ifb areaBossEncount = 0 // 初回のみログを出す
                areaBossEncount = 1;
                logger.logWriter(LogLevel.LOG_WARN, Messages.DETECTION_AREA_BOSS);
                while true
                    ret = ChannelChange(true);
                    ifb ret <> MAPLE_RESULT_NG
                        break;
                    endif
                wend
            else
                SOUND(" ");
                while true
                    ret = ChannelChange(true);
                    ifb ret <> MAPLE_RESULT_NG
                        break;
                    endif
                wend
            endif
        endif
    endif

    
    ifb  chkimg("../picture/緑点.bmp",0,0,0,1368,800)
        logger.logWriter(LogLevel.LOG_WARN,Messages.DISCOVERY_GREEN_POINT);
        exitexit;
    endif
    ifb chkimg("../picture/突発.bmp",0,0,0,1368,800);
        for i = 1 to 3
            BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,200);
        next
    endif
    if chkimg("../picture/talkEnd.bmp",0,0,0,1368,800) then BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,500);

    result = MAPLE_RESULT_OK; 
fend

function DeadCheck()
    // ifb chkimg("../picture/Grave.bmp",0,0,0,1368,800);
    //     for i = 1 to 3
    //         BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,200);
    //     next
    // endif
    result = 0;
fend

//=========================================
//
// comment : メイプルをアクティブウィンドウにする
//           DisplayDpl : 可変対応           
//           2018/04/18 Ver3.68 対策済
// param   : None
// return  : 0
//
//=========================================
function activeWindow()

    
    mapleWindowID = GETID("MapleStory","MapleStoryClass");
    manager.WindowSize_X_MAX = ST_CLWIDTH;
    manager.WindowSize_Y_MAX = ST_CLHEIGHT;
    x = STATUS(mapleWindowID,ST_CLWIDTH) + 50;
    y = STATUS(mapleWindowID,ST_CLHEIGHT) + 50;
    //ウィンドウが左上(1,1)にあるなら移動させない
    ifb STATUS(mapleWindowID,ST_X) <> 1 AND STATUS(mapleWindowID,ST_Y) <> 1
        ACW(mapleWindowID,1,1);
        for i = 1 to 2
            BTN(LEFT,CLICK,x,y,500); 
            BTN(LEFT,CLICK,200,405,500);
            BTN(LEFT,CLICK,200,405,200);
        next
    else
        BTN(LEFT,CLICK,200,405,500);
    endif
    result = mapleWindowID;

fend

//=========================================
//
// comment : 画面サイズを返却する
// param   : None
// return  : 0
//
//=========================================
function getWindowSize()

    mapleWindowID = GETID("MapleStory","MapleStoryClass");
    ww = STATUS(mapleWindowID,ST_CLWIDTH)
    wh = STATUS(mapleWindowID,ST_CLHEIGHT)
    size = "1024x768";
    //ウィンドウが左上(1,1)にあるなら移動させない
    ifb ww = 800 AND wh = 600
        size = "800x600"; 
    elseif ww = 1024 AND wh = 768
        size = "1024x768";
    elseif ww = 1280 AND wh = 720
        size = "1280x720";
    elseif ww = 1366 AND wh = 768
        size = "1366x768";
    endif
    
    result = size;
fend

//=========================================
//
// comment : 赤点チェック and 石化チェック
//           1366x800           
// param   : None
// return  : void
//
//=========================================

procedure urgentCheckAndRock()
    while true
        ifb chkimg("../picture/石化.bmp",0,0,0,1368,800)
            for x = 1 TO 20
                KBD(VK_LEFT,0,100)
                KBD(VK_RIGHT,0,100)
            next
        endif

        if chkimg("../picture/赤点.bmp",0,0,0,1368,800) then alartSound();
    wend
fend

//=========================================
//
// comment : 黄点チェックで左右移動
//           1366x800       
// param   : None
// return  : 0
//
//=========================================


function checkYelloPoint()
    ifb chkimg(picPathHelper("黄点"),0,0,0,60,160)
        KBD(VK_RIGHT,1,500)
        KBD(VK_RIGHT,2,800)
        exit
    endif

    ifb chkimg(picPathHelper("黄点"),0,90,130,130,160)
        KBD(VK_LEFT,1,500)
        KBD(VK_LEFT,2,800)
        exit
    endif   
    
    result = MAPLE_RESULT_OK; 
fend

//======================================================================================
// comment : ゲームマスターからの返答要求確認
//           1366x800       
// param   : None
// return  : MAPLE_RESULT_OK : 0
// 備考    : 次の順に判定を行う
//           1.チャット欄に「ご返答」が存在するか
//　         2.ハート拡声器ではないか
//           3.MiniMapに赤点があるか
//           上記条件が全て当てはまった場合返答処理を行う
//======================================================================================
function checkGameMaster()
    ifb chkimg(picPathHelper("replyRequest"),1,0,400,150,780); //「ご返答」がチャット欄にあるか
        logger.logWriter(LogLevel.LOG_WARN,Messages.REPLY_REQUEST);
        ifb !chkimg(picPathHelper("heart"),0,0,0,150,780);   //ハート拡声器ではないか
            ifb chkimg(picPathHelper("redpoint2"),0,0,0,400,400);   //ミニMAPに赤点が存在するか
                logger.logWriter(LogLevel.LOG_WARN,Messages.ENCOUNT_GAME_MASTER);
                responseToGameMaster(getResponse()); //返答処理
                screenShot(); //スクリーンショット保存
                initChat(); //チャット欄初期化
            else //赤点がなかった時はチャット欄を初期化
                logger.logWriter(LogLevel.LOG_INFO,Messages.NOT_RED_POINT);
                initChat();
            endif
        else
            initChat(); //GMではない場合チャット欄初期化
            logger.logWriter(LogLevel.LOG_WARN,Messages.HEART_SPEAKER);
        endif
    endif

    //追加質問返答チェック
    // isNextResponse = false;
    // while !isNextResponse
    //     logger.logWriter(LogLevel.LOG_WARN,Messages.WAIT_NEXT_RESPONSE);
    //     isNextResponse = waitNextQuestion();
    // wend

    result = MAPLE_RESULT_OK;
fend

//======================================================================================
// comment : ゲームマスターからの追加質問返答確認
// param   : None
// return  : MAPLE_RESULT_OK_BOOL : true
// 備考    : "引き続き、メイプルストーリーをお楽しみください"が表示されるまで質問に返答する。
//======================================================================================
function waitNextQuestion()
    isNextQuestion = true;
    while isNextQuestion
        ifb chkimg(lib.picPathHelper("nextQuestion"),1,0,400,150,780);
            //質問内容解析後、返答を行う。
            responseQuestion( checkQuestionAnalysis() );
        endif
        sleep(0.5);
        ifb chkimg(lib.picPathHelper("pleaseEnjoy"),1,0,400,150,780);
            isNextQuestion = false; // 引き続き、メイプルストーリーをお楽しみください。
        endif
        sleep(1);
    wend

    result = MAPLE_RESULT_OK_BOOL;
fend

//======================================================================================
// comment : どんな質問なのかを解析する
// param   : None
// return  : qustionNo : 質問No
// 備考    : TODO:質問のバリエーション
//======================================================================================
function checkQuestionAnalysis()
    questionNo = 0;
    //念のため5回ループして質問内容を確認
    for i = 1 to 5
       //if chkimg(lib.picPathHelper("nowPlayGameTitle"),1,0,400,150,780) then questionNo = 1;
        //質問内容が追加されたらここに追加。questionNoをインクリメントしてください。
    next
    result = questionNo;
fend

//======================================================================================
// comment : 質問に合わせて返答内容を変えて返答する
// param   : 質問No
// return  : MAPLE_RESULT_OK : 0
// 備考    : responseToGameMasterメソッドを呼び出して返答する。
//           メッセージ内容はメッセージクラスのanswer配列から取得する。
//======================================================================================
function responseQuestion(questionNo)
    select questionNo
        // 現在プレイされているゲームのタイトルをカタカナでお答えください。 に返答
        case 1
            responseToGameMaster( ResponseMessages.answer[ResponseMessages.PLAY_GAME_TITLE] );
        default
            //TODO
    selend 
    result = MAPLE_RESULT_OK;
fend 

//======================================================================================
// comment : ゲームマスターからの返答要求に使用
//           する文字列をランダムで取得
//           1366x800       
// param   : None
// return  : responseStr : 返却文字列
//======================================================================================
function getResponse()
    //返答用の文字列初期化
    responseStr = ResponseMessages.RESPONSE_STR;
    //ランダムで返答用の文字列を取得
    num = random(length(ResponseMessages.resMessages) - 1); // ArraySize - 1
    responseStr = ResponseMessages.resMessages[num];
    //応答文字列返却
    result = responseStr;
fend


//=========================================
// comment : ゲームマスターからの返答要求に返答
//           1366x800       
// param   : 応答文字列
// return  : 0
//=========================================
function responseToGameMaster(responseStr)

    logger.logWriter(LogLevel.LOG_WARN,Messages.RESPONSE_MESSAGE);
    KBD(VK_1,0,1000);
    SendStr(0,responseStr,1,True);
    KBD(VK_CTRL,1,1500);
    KBD(VK_V,0,1500);
    KBD(VK_CTRL,2,1000);
    KBD(VK_ENTER,0,1000);
    BTN(LEFT,CLICK,400,350,600);
    BTN(LEFT,CLICK,400,350,600);
    result = MAPLE_RESULT_OK; 
fend

//=========================================
// comment : ♡拡声器が見えたらチャットを初期化する
//           1366x800       
// param   : None
// return  : 0
//=========================================
function initChat()

    logger.logWriter(LogLevel.LOG_INFO,Messages.INIT_CHAT);
    CHAT_INIT_CMD = "/?";

    KBD(VK_1,0,1000)
    SendStr(0,CHAT_INIT_CMD,1,True)
    KBD(VK_CTRL,1,1500)
    KBD(VK_V,0,1500)
    KBD(VK_CTRL,2,1000)
    KBD(VK_ENTER,0,1000)
    BTN(LEFT,CLICK,400,350,600)
    BTN(LEFT,CLICK,400,350,600)
    result = MAPLE_RESULT_OK; 
fend

//=========================================
//
// comment : 石化チェック・赤点チェック・加護チェック
// param   : None
// return  : 0 
//
//=========================================
procedure parallelProgram()
    isEnc = false;
    wzEditValue = 0 
    while TRUE
        ifb chkimg("../picture/石化2.bmp",0,0,0,1368,800)
            for i = 1 to 20
                KBD(VK_LEFT,0,100);
                KBD(VK_RIGHT,0,100);
            next
        endif

        if chkimg("../picture/加護.bmp",0,0,0,1368,800) then KBD(VK_F4,0,1000)

        ifb wzEditValue <> 2
            ifb chkimg("../picture/赤点.bmp",0,0,0,200,200)
                logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
                lib.alartSound();  
                wzEditValue = 1;
            endif   
        endif

        ifb wzEditValue <> 1 
            ifb chkimg("../picture/redpoint2.bmp",0,0,0,200,200)
                ifb !isEnc;
                    isEnc = true;
                    logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
                endif
                lib.alartSound();
                wzEditValue = 2;
            else
                isEnc = false;
            endif
        endif     

        ifb chkimg("../picture/緑点.bmp",0,0,0,1368,800)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DISCOVERY_GREEN_POINT);
            exitexit;
        endif
    wend
fend

procedure parallelProgram_Gmember()
    while TRUE
        ifb chkimg("../picture/石化2.bmp",0,0,0,1368,800)
            for i = 1 to 20
                KBD(VK_LEFT,0,100);
                KBD(VK_RIGHT,0,100);
            next
        endif

        if chkimg("../picture/加護.bmp",0,0,0,1368,800) then KBD(VK_F4,0,1000)

        ifb chkimg("../picture/赤点.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            alartSound();  
        endif   

        ifb chkimg("../picture/redpoint2.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            alartSound();
        endif   

        ifb chkimg("../picture/緑点.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DISCOVERY_GREEN_POINT);
            exitexit;
        endif

        ifb chkimg("../picture/guild_member.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN, "ギルドメンバーを検知しました。");
            alartSound();
        endif 
    wend
fend

procedure parallelProgramExitMode()
    thread lib.RegularOnClick();
    while TRUE
        if chkimg("../picture/加護.bmp",0,0,0,1368,800) then KBD(VK_F4,0,1000)

        ifb chkimg("../picture/赤点.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            screenShot();
            killMapleStory();
            loginMapleStory();
            //alartSound();
        endif

        ifb chkimg("../picture/redpoint2.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            screenShot();
            killMapleStory();
            loginMapleStory();
            //alartSound();
        endif 

        ifb  chkimg("../picture/緑点.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DISCOVERY_GREEN_POINT);
            exitexit;
        endif
    wend
fend

procedure parallelProgramExitMode_Gmember()
    thread lib.RegularOnClick();
    while TRUE
        ifb chkimg("../picture/石化2.bmp",0,0,0,1368,800)
            for i = 1 to 20
                KBD(VK_LEFT,0,100);
                KBD(VK_RIGHT,0,100);
            next
        endif

        if chkimg("../picture/加護.bmp",0,0,0,1368,800) then KBD(VK_F4,0,1000)

        ifb chkimg("../picture/赤点.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            screenShot();
            killMapleStory();
            loginMapleStory();
            //alartSound();
        endif

        ifb chkimg("../picture/redpoint2.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            screenShot();
            killMapleStory();
            loginMapleStory();
            //alartSound();
        endif 

        ifb chkimg("../picture/guild_member.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN, "ギルドメンバーを検知しました。");
            screenShot();
            killMapleStory();
            loginMapleStory();
            //alartSound();
        endif 

        ifb  chkimg("../picture/緑点.bmp",0,0,0,300,300)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DISCOVERY_GREEN_POINT);
            exitexit;
        endif
    wend
fend


procedure parallelProgramWaitMode()
    while TRUE
        ifb chkimg("../picture/石化2.bmp",0,0,0,1368,800)
            for i = 1 to 20
                KBD(VK_LEFT,0,100);
                KBD(VK_RIGHT,0,100);
            next
        endif

        if chkimg("../picture/加護.bmp",0,0,0,1368,800) then KBD(VK_F4,0,1000)

        ifb chkimg("../picture/赤点.bmp",0,0,0,1368,800)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            thread alartSound();
            exitexit;
        endif
        
        ifb chkimg("../picture/redpoint2.bmp",0,0,0,800,600)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            thread alartSound();
            exitexit;
        endif 

        ifb  chkimg("../picture/緑点.bmp",0,0,0,1368,800)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DISCOVERY_GREEN_POINT);
            exitexit;
        endif
    wend
fend

//=========================================
// comment : 赤点があるかどうかをチェックする
// param   : None
// return  : true or false
// 備考    : None
//=========================================
function isRedPoint()

        isEncount = false;
        //ifb chkimg("../picture/赤点.bmp",0,0,0,1368,800) || ifb chkimg("../picture/redpoint2.bmp",0,0,0,800,600)
        //    isEncount = true;
        //endif

        result = isEncount;
fend

//=========================================
// comment : 画像認識用パスヘルパー
// param   : ファイル名
// return  : 0
// 備考    : ../picture/fileName.bmp を返却
//=========================================
function picPathHelper(fileName)
    result = PIC_PATH + fileName + ".bmp";
fend

//=========================================
// comment : メイプルが起動されていなければ終了
// param   : None
// return  : 0
// 備考    : windowIDが -1 であれば起動されてない
//=========================================
function checkStartingMapleStory()
    windowID = GETID("MapleStory","MapleStoryClass")
    
    ifb windowID < 0;
        logger.logWriter(LogLevel.LOG_ERROR,Messages.STOP_MAPLE_MESSAGE);
        exitexit;
    endif
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : メイプルが起動されていなければ
//           1回のみログを出力
// param   : None
// return  : 0
// 備考    : windowIDが -1 であれば起動されてない
//=========================================
public startingLogCount = 0;
function checkStartingMapleStoryOutputLog()
    windowID = GETID("MapleStory","MapleStoryClass")
    ifb windowID < 0  and startingLogCount = 0;
        startingLogCount = 1;
        logger.logWriter(LogLevel.LOG_ERROR,Messages.STOP_MAPLE_MESSAGE);
    endif
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : 警告時のサウンド通知
// param   : None
// return  : 0
//=========================================
function alartSound()
    for i = 1 to 20
        SOUND(" ");
        sleep(0.2);
    next
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : メモリ解放
// param   : None
// return  : 0
//=========================================
function memoryRelease()
    memoryReleaseCommand = "empty.exe *"; 
    DOSCMD(memoryReleaseCommand);
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : スクリーンショット保存
// param   : None
// return  : 0 
//=========================================
function screenShot()
    //現在日時を名前にして保存する
    SAVEIMG(SCREEN_SHOT_SAVE_DIR + getNowDateTime(),0);
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : スクリーンショット保存(jpg)
// param   : None
// return  : 0 
//=========================================
const API_SS_NAME = "__start__.jpg";
public ApiBase64Txt = "";
function JpgScreenShot()
    //現在日時を名前にして保存する
    SAVEIMG(API_SS_NAME, 0, null, null, null, null , false, 20);
    result = MAPLE_RESULT_OK;
fend

function DoStartSS()
    JpgScreenShot();
    result = MAPLE_RESULT_OK;
fend

function ConvertBase64()
    DOSCMD("",TRUE,FALSE)
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : 現在日時(ミリ秒まで)を取得する
// param   : None
// return  : YYYYMMDDHHNNSSZZ
//=========================================
function getNowDateTime()
    GETTIME();
    result = G_TIME_YY4 + G_TIME_MM2 + G_TIME_DD2 + _ //YYYYMMDD
             G_TIME_HH2 + "_" + G_TIME_NN2 + "_" + G_TIME_SS2 + "_" + _ //HHNNSS
             G_TIME_ZZ2;                              //ZZ
fend

//=========================================
// comment : メイプルストーリーを起動する
// param   : None
// return  : 0
//=========================================
function execMapleStory()
    logger.logWriter(LogLevel.LOG_INFO, "MapleStoryを起動します");
    DOSCMD(MAPLE_STORY_EXE_DIR,TRUE,FALSE)
    sleep(10);
    id = GETID("MapleStory","StartUpDlgClass");
    while true
        CLKITEM(id,"Play!");
        sleep(1);
        if GETID("MapleStory","StartUpDlgClass") = -1 then break;
    wend
    result = MAPLE_RESULT_OK;
fend



//=========================================
// comment : メイプルストーリーを終了する
// param   : None
// return  : 0
//=========================================
function killMapleStory()
    cmd = "taskkill /F /IM MapleStory.exe";
    DOSCMD(cmd,TRUE,FALSE);
    logger.logWriter(LogLevel.LOG_ERROR,Messages.TASK_KILL_MESSAGE);
    SLEEP(5)
    execMapleStory(); // 再起動
    result = MAPLE_RESULT_OK;
fend

function IsLoginDisp()
    result = chkimg(lib.picPathHelper("StartButton"),0,0,0,1366,768)
fend

//=========================================
// comment : Microsoft Edgeを終了する
//           ※スレッドで実施用※
// param   : None
// return  : 0
//=========================================
function KillMicrosoftEdge()
    logger.logWriter(LogLevel.LOG_INFO, "Microsoft Edge kill thread.");
    while true
        cmd = "taskkill /F /IM MicrosoftEdge.exe";
        DOSCMD(cmd,TRUE,FALSE);
        //logger.logWriter(LogLevel.LOG_ERROR, "Microsoft Edgeを終了しました");
        //SLEEP(5)
        //execMapleStory(); // 再起動
        sleep(30);
    wend
    result = MAPLE_RESULT_OK;
fend

//=========================================
// comment : ログインする
// param   : None
// return  : 0
//=========================================
function loginMapleStory()
    while true
        sleep(1);
        if IsLoginDisp() then break;
    wend
    lib.activeWindow();
    sleep(3);
    lib.LoginEntry();
    result = MAPLE_RESULT_OK;
fend

function LoginEntry()

    // 1次パス取得
    //firstPassword = READINI("Password","PW",LOGIN_INFO_INI_PATH);
    firstPassword = MAPLE_LOGIN_PW;
    print "fp:"+firstPassword;
    SENDSTR(0, firstPassword);
    // 入力文字の削除
    for i = 1 to 20
        KBD(VK_RIGHT,0,200)
    next
    for i = 1 to 15
        KBD(VK_BACK,0,200)
    next
    // パス貼り付け
    KBD(VK_CTRL,1,1000);
    KBD(VK_V,0,1000);
    KBD(VK_CTRL,2,100);
    // ログイン
    KBD(VK_ENTER,0,1000);
    sleep(10);
    KBD(VK_ENTER,0,1000);
    ChannelSelect();
    // キャラクター選択
    print "char click"
    KBD(VK_ENTER,0,2000)
    KBD(VK_ENTER,0,2000)
    // 2次パス取得
    //secondPassword = READINI("SecondPassword","PW",LOGIN_INFO_INI_PATH);
    secondPassword = SECOND_PW;
    spLength = length(secondPassword);
    print secondPassword;
    dim passArray[spLength-1];
    for i = 1 to spLength
        passArray[i-1] = COPY(secondPassword,i,1);
        print passArray[i-1];
    next
    // 2次パス画像クリック
    for i = 1 to spLength
        ifb chkimg("../picture/2ndPasskey/" + passArray[i-1] + ".bmp",0,0,0,1366,768)
             BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,500);
             BTN(LEFT,CLICK,100,30,500);
        endif
    next
    ifb chkimg(lib.picPathHelper("2ndPWOK"),0,0,0,1366,768)
        for i = 1 to 2
            BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,300);
        next
    endif

    result = 0;
fend

function ChannelSelect()
    logger.logWriter(LogLevel.LOG_INFO, "チャンネルを選択します");
    ch = RANDOM(16)
    for i = 0 to ch
        KBD(VK_RIGHT,0,150);
    next
    KBD(VK_ENTER,0,1000);
    mes = (ch + 2) + "chにログインします" ;
    logger.logWriter(LogLevel.LOG_INFO, mes);
    sleep(5);
    result = 0;
fend

//=========================================
// comment : 指定時間待機する
// param   : None
// return  : 0
//=========================================
function wait(sleepTime)

    counter = 1;
    //待機秒ログ出力
    message = sleepTime + Messages.STOP_MAPLE_MESSAGE;
    logger.logWriter(LogLevel.LOG_INFO,message);
    //待機処理
    for i = 1 to sleepTime
        sleep(1)
        print counter + "秒待機しました";
        counter = counter + 1;
    next
    print sleepTime + "秒経過しました。待機を終了します。"
    counter = 1;
    result = 0;

fend

//=========================================
// comment : 職業別ログ出力先フォルダを取得する
// param   : None
// return  : 0
//=========================================
function getOutputDirectory()

    currentDirectory = GET_CUR_DIR
    outputDirectory = ""

    re = CreateOleObj("VBScript.RegExp")
    re.pattern = "([^\\]+?)?$" //正規表現パターン。1と5の間の文字を取り出す。
    re.Global = True //文字列全体を検索。trueでする(規定)、falseでしない(マッチしたらそこで終了)。
    re.IgnoreCase = True //大文字・小文字を区別。trueでしない(規定)、falseでする。
    match = re.Execute(currentDirectory)

    //マッチしたものをすべて出力
    for i = 0 To match.Count - 1
        outputDirectory = outputDirectory + match.Item(i).Value
    next

    result = outputDirectory;
fend

//=========================================
// comment : チャンネル変更
// param   : $1 : ルーンのチェックを行うか
// return  : 0
//=========================================
function ChannelChange(isRuneCheck)

    while true
        ret = CCexec();
        ifb ret = 0 and isRuneCheck
            while true
                if chkimg(lib.picPathHelper("yellowPoint"),0,0,0,250,300) then break;
            wend
            ifb chkimg(lib.picPathHelper("runePoint"),0,0,0,250,300) _
              or _
            chkimg(lib.picPathHelper("RuneNotice"),0,0,0,1366,768)
                logger.logWriter(LogLevel.LOG_WARN, Messages.CHANNEL_CHANGE_DET_RUNE);
            elseif chkimg(lib.picPathHelper("guild_member"),0,0,0,250,300)
                logger.logWriter(LogLevel.LOG_WARN, "ギルドメンバーを検知しました。");
                continue;
            elseif chkimg(lib.picPathHelper("redpoint2"),0,0,0,250,300)
                logger.logWriter(LogLevel.LOG_WARN, "CC時に赤点を検知しました。");
                continue;
            else
                break;
            endif
        else
            break;
        endif
    wend

    result = ret;

fend

//=========================================
// comment : チャンネル変更内部処理
// param   : None
// return  : 0
//=========================================
function CCexec()

    ret = MAPLE_RESULT_OK;
	// 初期化
	BTN(LEFT,CLICK,200,405,500);
	BTN(LEFT,CLICK,200,405,200);
	KBD(VK_ESC,0,500);
	// ポップアップチェック
	SLEEP(0.5)
	ifb chkimg("../picture/ConfirmButton.bmp",0,0,0,1368,800);
        BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,1000);
    endif
	KBD(VK_ENTER,0,1000);
	KBD(VK_LEFT,0,800);
	KBD(VK_ENTER,0,2500);
    // 今はできませんチェック
	SLEEP(1)
	ifb chkimg("../picture/ConfirmButton.bmp",0,0,0,1368,800);
        logger.logWriter(LogLevel.LOG_WARN,Messages.CHANNEL_CHANGE_FAIL);
        BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,1000);
        ret = MAPLE_RESULT_NG;
    else
        logger.logWriter(LogLevel.LOG_WARN,Messages.CHANNEL_CHANGE_SUCCESS);
    endif

    result = ret;
fend

//=========================================
// comment : チャンネル変更後待機し
//           他プレイヤーがいないか確認
// param   : None
// return  : 0
//=========================================
function checkPlayer()

	// 画面が完全に切り替わるまで待機
	// 他プレイヤーがいないか確認する
	while true
	    // いなければ戻る
       //if chkimg() break;
	    // いたらもう一度チャンネル変更
    wend    

    result = 0;
fend


//=========================================
// comment : ルーンの矢印を解析し入力する
// param   : None
// return  : 0
//=========================================
function OpenRune()

    moveRunePoint();
    CALL ChkimgRune.uws;
    
    result = 0;
fend


//=========================================
// comment : ルーンの矢印を解析し入力する
// param   : None
// return  : 0
//=========================================
function OpenRuneXY(x,y,isDown)

    moveRunePointXY(x,y);
    ifb isDown
        CALL ChkimgRuneDownJump.uws;
    elseif !isDown
        CALL ChkimgRune.uws;
    endif
    result = 0;
fend

//=========================================
// comment : ルーンの位置まで移動する
// param   : None
// return  : 0
//=========================================
function moveRunePoint()

    // ルーンの位置を取得
    runePointX = 0;
    runePointY = 0;
    ifb chkimg(lib.picPathHelper("runePoint"),0,0,0,250,300);
        runePointX = G_IMG_X;
        runePointY = G_IMG_Y;
    else
        print "ルーンの位置が取得できません";
        exit;
    endif
    
    // 黄点を取得
    yellowPointX = 0;
    yellowPointY = 0;
    ifb chkimg(lib.picPathHelper("yellowPoint"),0,0,0,350,350);
        yellowPointX = G_IMG_X;
        yellowPointY = G_IMG_Y;
    else
        print "黄点の位置が取得できません";
        result = 2;
    endif
        
    // 移動する方向を決定
    moveKey = VK_RIGHT
    ifb yellowPointX > runePointX
        moveKey = VK_LEFT
    endif
    
    moveErrTime = GETTIME(30/86400)
    // ルーンの横位置まで移動
    KBD(moveKey,1,100);
    while true
        ifb chkimg(lib.picPathHelper("yellowPoint"),0, runePointX-5, 0, runePointX+5, 300)
            break;
        else
            ifb GETTIME() > moveErrTime
                break;
            endif
        endif  
    wend
    KBD(moveKey,2,50)
    
    result = 0;
fend

//=========================================
// comment : ルーンの位置まで移動する
// param   : None
// return  : 0
//=========================================
function moveRunePointXY(x,y)

    // ルーンの位置を取得
    runePointX = x;
    runePointY = y;

    // 黄点を取得
    yellowPointX = 0;
    yellowPointY = 0;
    ifb chkimg(lib.picPathHelper("yellowPoint"),0,0,0,350,350);
        yellowPointX = G_IMG_X;
        yellowPointY = G_IMG_Y;
    else
        print "黄点の位置が取得できません";
        result = 2;
    endif
        
    // 移動する方向を決定
    moveKey = VK_RIGHT
    ifb yellowPointX > runePointX
        moveKey = VK_LEFT
    endif
    
    moveErrTime = GETTIME(30/86400)
    // ルーンの横位置まで移動
    KBD(moveKey,1,100);
    while true
        ifb chkimg(lib.picPathHelper("yellowPoint"),0, runePointX-5, 0, runePointX+5, 300)
            break;
        else
            ifb GETTIME() > moveErrTime
                break;
            endif
        endif  
    wend
    KBD(moveKey,2,10)
    
    result = 0;
fend

//=========================================
// comment : 定期的に画面をクリックする
//           ※必ずスレッドで呼び出すこと※
// param   : None
// return  : 0
//=========================================
function RegularOnClick()
    while true
        BTN(LEFT,CLICK,740,340,500);
        sleep(30);
    wend
    result = 0;
fend

//=========================================
// comment : CSVファイルからログイン情報を取得する
// param   : None
// return  : 0
//=========================================
function GetLoginInfo()
    fid = FOPEN(LOGIN_INFO_CSV_PATH , F_READ)
    MAPLE_STORY_EXE_DIR = FGET( fid, 1, 1 )
    MAPLE_LOGIN_PW      = FGET( fid, 1, 2 )
    SECOND_PW           = FGET( fid, 1, 3 )
   result = 0;
fend

//=========================================
// comment : グローバル変数にクイックスロットの
//           検出座標を設定する
// param   : $1 x1, $2: y1, $3:x2 , $4: y2
// return  : 0
//=========================================
function SetCoordinate(var x1, var y1, var x2, var y2)
    x1 = G_IMG_X - 1;
    x2 = G_IMG_X + 30;
    y1 = G_IMG_Y - 1;
    y2 = G_IMG_Y + 5;
    result = 0;
fend


//=========================================
// comment : 深夜の自動探知機回避
// param   : None
// return  : 0
//=========================================
function CheckAutoLieDetector()

    GETTIME()
    c = 0;
    ifb IsAutoLieDetectorTime()
        while true
            sleep(5);
            KBD(comKey.POINT_SHOP_KEY,0,1000);
            sleep(5);
            ifb chkimg(lib.picPathHelper("ConfirmButton"),0, 0, 0, 1366, 800)
                BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,1000);
            endif
            ifb chkimg(lib.picPathHelper("point_shop_now"),0, 0, 0, 300, 800)
                logger.logWriter(LogLevel.LOG_INFO, "ポイントショップに移動しました");
                sleep(300)
                logger.logWriter(LogLevel.LOG_INFO, "待機を終了しました");
                for i = 1 to 3
                    BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,400);
                next
                break;
            endif  
        wend
    endif
    result = 0;
fend

function IsAutoLieDetectorTime()
    GETTIME()
    ifb G_TIME_HH = 2 and G_TIME_NN > 6  and G_TIME_HH = 2 and G_TIME_NN < 10 or _
        G_TIME_HH = 3 and G_TIME_NN > 16 and G_TIME_HH = 3 and G_TIME_NN < 20 or  _
        G_TIME_HH = 4 and G_TIME_NN > 6  and G_TIME_HH = 4 and G_TIME_NN < 10 or _
        G_TIME_HH = 4 and G_TIME_NN > 41 and G_TIME_HH = 4 and G_TIME_NN < 45
        result = true;
    else
        result = false;
    endif
fend

function ExecPowerShell(cmd)
    DOSCMD("powershell -Command " + cmd)
    result = MAPLE_RESULT_OK;
fend


ENDCLASS
