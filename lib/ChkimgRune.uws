//=========================================//
// Map Name    : ルーン解除スクリプト      //
//=========================================//
// Mob Name    : 
// Mob Level   : 
// Mob HP      : 
// Mob Exp     : 
//=========================================//
// Mob Name    : 
// Mob Level   : 
// Mob HP      : 
// Mob Exp     : 
//=========================================//
// comment     : None
// param       : None
// return      : None
// ========================================//
// Display Dpl : 1366x768 only
//=========================================//
// Copy Right (C) 2019 All Right Reserved. 
//   @author k.kawabata @kawaken1025
//     Create Date : 2019/01/06
//=========================================//

OPTION OPTFINALLY
CALL MapleLibrary.uws;
CALL ChkImgX.uws;
startup_chkimgx();

isNew           = false; // ver3.82 矢印の種類判定フラグ
isThresholdUP   = true;  // 認識失敗時に判定閾値度を上げるフラグ
isRange         = false; // 画像範囲取得フラグ
isSpinnig       = false; // 回転ルーンフラグ
threshold       = 15;    // 画像判定閾値
addThreshold    = 0.50;  // 増加閾値
maxAnalyzeCount = 5;     // 失敗時のリトライ回数
analyzeTimeLimit = GETTIME(8/86400) // 解析タイムリミット

try

    // ルーン起動
    KBD(comKey.NPC_TALK_KEY,0,500);
    GETTIME() 
    start = G_TIME_NN2 + "分" + G_TIME_SS2 + "秒" + G_TIME_ZZ2 + "ミリ秒"

    for i = 1 to maxAnalyzeCount

        for ii = 1 to 5
            ifb CHKIMGX("../picture/arrow/spinning_str1.png",0,0,0,700,150,-1,threshold,-1) or _
            CHKIMGX("../picture/arrow/spinning_str2.png",0,0,0,400,200,-1,threshold,-1)
                isSpinnig = true;
                logger.logWriter(LogLevel.LOG_INFO, "回転ルーンを検知しました");
                break;
            endif
        next

        ifb isSpinnig
            // 適当なキーを押してルーン入力を終了
            KBD(VK_LEFT,0,100)
            movePointShop();
            isSpinnig = false;
            exit;
        endif

        // 画像判定範囲を取得
        ifb !isRange
            // 範囲チェック5回まで実施
            for ii = 1 to 5
                ifb CHKIMGX("../picture/arrow/ArrowDirectionKey.png",0,0,0,700,300,-1,threshold,-1)
                    break;
                endif
            next
            logger.logWriter(LogLevel.LOG_INFO, "Rune coordinate info: X = " + G_IMGX_X + ", Y = " + G_IMGX_Y);
            ifb G_IMGX_X < 0 and G_IMGX_Y < 0
                x1 = 300;
                x2 = 900;
                y1 = 180;
                y2 = 310;
            else
                x1 = G_IMGX_X - 100;
                x2 = x1 + 350;
                y1 = G_IMGX_Y + 40;
                y2 = y1 + 120;
                isRange = true;
            endif
        endif

        list = CreateOleObj("System.Collections.ArrayList")

        ifb !isNew
            arrowCountL = CHKIMGX("../picture/arrow/l.png",0,x1,y1,x2,y2,-1,threshold,-1)
            for i = 0 to arrowCountL - 1
                list.add(ALL_IMGX_X[i])
                list.add(VK_LEFT)
            next
        endif
        
        // if isNew or list.count = 0
        //     arrowCountL = CHKIMGX("../picture/arrow/newl.png",0,x1,y1,x2,y2,-1,threshold,-1)
        //     for i = 0 to arrowCountL - 1
        //         list.add(ALL_IMGX_X[i])
        //         list.add(VK_LEFT)
        //         isNew = true;
        //     next
        // endif
        print "左発見個数:" + arrowCountL

        ifb 8 < list.count
            logger.logWriter(LogLevel.LOG_WARN, "検出数が4個を超過しました。解析を終了します。");
            exit;
        endif

        ifb list.count <> 8
            ifb !isNew
                arrowCountR = CHKIMGX("../picture/arrow/r.png",0,x1,y1,x2,y2,-1,threshold,-1)
                for i = 0 to arrowCountR - 1
                    list.add(ALL_IMGX_X[i])
                    list.add(VK_RIGHT)
                next
            endif

            // ifb isNew or list.count = 0 
            //     arrowCountR = CHKIMGX("../picture/arrow/newr.png",0,x1,y1,x2,y2,-1,threshold,-1)
            //     for i = 0 to arrowCountR - 1
            //         list.add(ALL_IMGX_X[i])
            //         list.add(VK_RIGHT)
            //         isNew = true;
            //     next
            // endif
            print "右発見個数:" + arrowCountR

            ifb 8 < list.count
                logger.logWriter(LogLevel.LOG_WARN, "検出数が4個を超過しました。解析を終了します。");
                exit;
            endif
        endif

        ifb list.count <> 8
            ifb !isNew
                arrowCountU = CHKIMGX("../picture/arrow/u.png",0,x1,y1,x2,y2,-1,threshold,-1)
                for i = 0 to arrowCountU - 1
                    list.add(ALL_IMGX_X[i])
                    list.add(VK_UP)
                next
            endif
            // ifb isNew or list.count = 0 
            //     arrowCountU = CHKIMGX("../picture/arrow/newu.png",0,x1,y1,x2,y2,-1,threshold,-1)
            //     for i = 0 to arrowCountU - 1
            //         list.add(ALL_IMGX_X[i])
            //         list.add(VK_UP)
            //     next
            // endif
            print "上発見個数:" + arrowCountU

            ifb 8 < list.count
                logger.logWriter(LogLevel.LOG_WARN, "検出数が4個を超過しました。解析を終了します。");
                exit;
            endif
        endif


        ifb list.count <> 8
            ifb !isNew
                arrowCountD = CHKIMGX("../picture/arrow/d.png",0,x1,y1,x2,y2,-1,threshold,-1)
                for i = 0 to arrowCountD - 1
                    list.add(ALL_IMGX_X[i])
                    list.add(VK_DOWN)
                next
            endif
            // ifb isNew or list.count = 0 
            //     arrowCountD = CHKIMGX("../picture/arrow/newd.png",0,x1,y1,x2,y2,-1,threshold,-1)
            //     for i = 0 to arrowCountD - 1
            //         list.add(ALL_IMGX_X[i])
            //         list.add(VK_DOWN)
            //         isNew = true;
            //     next
            // endif
            print "下発見個数:" + arrowCountD
        endif

        // 検出数出力
        ifb list.count = 0 
            print "合計検出数:" + list.count
        else
            print "合計検出数:" + list.count/2
        endif
        
        // 解析失敗処理
        ifb list.count <> 8
            // タイムリミットチェック
            ifb GETTIME() > analyzeTimeLimit
                logger.logWriter(LogLevel.LOG_INFO,"ルーンの解析時間がタイムリミットに達したためルーン解析を終了します");
                exit;
            endif
            // 範囲チェック済の場合再解析
            ifb isRange
                for t = 0 to list.count-1
                    print list.item(t)
                next
                list.clear();
                logger.logWriter(LogLevel.LOG_INFO, "ルーンのコマンド解析に失敗しました");
                logger.logWriter(LogLevel.LOG_INFO, "ルーンの再解析を行います");
                sleep(0.8)
                // 判定閾値を上昇
                ifb isThresholdUP
                    newThreshold = threshold + addThreshold
                    logger.logWriter(LogLevel.LOG_INFO, "画像判定閾値を増加します。現在閾値:" + threshold + " 増加後閾値:" + newThreshold);
                    threshold = newThreshold
                endif
            // 範囲チェックが未の場合解析終了
            else
                logger.logWriter(LogLevel.LOG_INFO, "ルーンのコマンド解析に失敗しました");
                logger.logWriter(LogLevel.LOG_INFO, "範囲が検出できていないためルーン解析を終了します");
                exit;
            endif
        // 解析成功 ループを抜ける
        elseif list.count = 8
            break;
        endif
    next

    ifb list.count <> 8
        logger.logWriter(LogLevel.LOG_INFO,"ルーンの解析回数が最大リトライ回数"　+ maxAnalyzeCount + "回に達しました");
        exit;
    endif

    // 矢印キーの格納先List
    arrowList = CreateOleObj("System.Collections.ArrayList")

    // ここからソート
    // ヒットした座標の昇順でソートする
    for i = 1 to 4
        _min = 99999;
        minidx = 0;
        j = 0;

        for check = 1 to list.count/2;
            ifb _min > list.item(j)
                minidx = j;
                _min = list.item(j);
            endif
            j = j + 2;
        next
        arrowList.add(list.item(minidx + 1));
        list.RemoveAt(minidx);
        list.RemoveAt(minidx);
    next

    for i = 0 to arrowList.count-1
        KBD(arrowList.item(i),0,70)
    next
    logger.logWriter(LogLevel.LOG_INFO,"ルーンへコマンドを入力しました。");
    
    // 解析所要時刻の出力
    GETTIME();
    end    = G_TIME_NN2 + "分" + G_TIME_SS2 + "秒" + G_TIME_ZZ2 + "ミリ秒";
    startp = "ルーン解析開始時間：" + start;
    endp   = "ルーン解析終了時間：" + end;
    logger.logWriter(LogLevel.LOG_INFO, startp);
    logger.logWriter(LogLevel.LOG_INFO, endp);

finally
  shutdown_chkimgx()
endtry

// =======================================================
// comment : 回転ルーンを検知した場合PSHOP移動する処理
// create date : 2021/03/07
// =======================================================
function movePointShop()
    while true
        // 少し待機してポイントショップ移動
        sleep(5);
        KBD(comKey.POINT_SHOP_KEY,0,1000);
        sleep(2);
        ifb chkimg(lib.picPathHelper("ConfirmButton"),0, 0, 0, 1366, 800)
            BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,500);
            BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,500);
        endif
        ifb chkimg(lib.picPathHelper("point_shop_now"),0, 0, 0, 300, 800)
            logger.logWriter(LogLevel.LOG_INFO, "ポイントショップに移動しました");
            break;
        endif
    wend
 
    // ポイントショップから戻るボタンを判定
    while true
        ifb chkimg(lib.picPathHelper("point_shop_now"),0, 0, 0, 300, 800)
            for i = 1 to 3
                BTN(LEFT,CLICK,G_IMG_X,G_IMG_Y,400);
            next
            break;
        else
            sleep(1)
        endif
    wend
    
    // 黄点見えるまで待機
    while true
        ifb chkimg(lib.picPathHelper("黄点"),0, 0, 0, 300, 800)
            break;
        endif
    wend

    // 赤点検知でチャンネル変更する判定
    flag = false;
    for i = 1 to 5
        ifb chkimg(lib.picPathHelper("redpoint"),0, 0, 0, 300, 800)
            flag = true;
            break;
        endif
        sleep(0.5)
    next

    // 赤点検知時はチャンネル変更
    ifb flag 
        lib.channelChange(true);
    endif

    result = 0
fend