
CALL ../MapleAPI/MapleAPI.uws;

lib.activeWindow();
thread lib.parallelProgramExitMode();

petTime = GETTIME( 300 / 86400 )

while true
    while true
        KBD(VK_LEFT,1,10);
        KBD(VK_SPACE,0,300)
        if chkimg(lib.picPathHelper("yellowPoint"),0,0,0,48,147) then break;
        lib.urgentCheck();
    wend

    KBD(VK_LEFT,2,200);
    upStage();

    while true
        KBD(VK_RIGHT,1,10)
        KBD(VK_SPACE,0,300)
        if !chkimg(lib.picPathHelper("yellowPoint"),0,0,0,135,130) then break;
        lib.urgentCheck();
       // RedPointStop();
    wend
    //KBD(key.NORMAL_ATTACK_KEY,2,200);
    KBD(VK_RIGHT,2,200);

    ifb petTime < GETTIME()
        KBD(VK_T,0,1000)
        logger.logWriter(LogLevel.LOG_INFO,"ペットの餌を使用しました。");
        petTime = GETTIME( 1200 / 86400 )
    endif

    KBD(VK_G,0,1000)

wend

function Attack()
    for i = 1 to 6
        KBD(VK_R,0,250);
    next
    result = 0;
fend

function upStage()

    KBD(VK_RIGHT,1,100)
    while true
        ifb !chkimg(lib.picPathHelper("yellowPoint"),0,0,0,60,130)
            break;
        endif
    wend
    KBD(VK_RIGHT,2,300)
    KBD(VK_UP,1,100)
    KBD(VK_SPACE,0,250)
    KBD(VK_UP,2,100)
    // KBD(VK_UP,1,200)
    // while true
    //     if chkimg(lib.picPathHelper("yellowPoint"),0,48,103,62,112) then break;
    // wend
    // KBD(VK_UP,2,1000)
    // KBD(VK_RIGHT,2,100)   
    result = 0;
fend

function RedPointStop()


    result = 0;
fend

function pick()
    while true
        KBD(VK_Z,0,10);
        result = 0;
    wend
fend