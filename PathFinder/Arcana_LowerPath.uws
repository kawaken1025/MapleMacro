//=========================================//
// Map Name    : 洞窟の通路下　　　　　 　　 //
//=========================================//

//=========================================//
// comment     : None
// param       : None
// return      : None
// ========================================//
// Display Dpl : 800x600 or 1366x768
//=========================================//
// Copy Right (C) 2019 All Right Reserved. 
//   @author k.kawabata @kawaken1025
//     Create Date : 2019/09/08
//=========================================//

//=========================================
// init
//=========================================
// MapleAPI : LogWriter.uws , MapleLibrary.uws , UseSkillFiveJob.uws
CALL ../MapleAPI/MapleAPI.uws;
// import Luminous skillKeySetting
CALL KeySetting.uws;
// Util - sugarTime exec
CALL ../Util/MapleUtil.uws;
// multiThread checkRedPoint and checkMineralization
thread parallelProgram();
// MessageWindow init
CALL PathFinderUtil.uws;
CALL ../Util/MapleUtil.uws;
public IsEventSkill = false;
public collectTime = GETTIME( 120 / 86400 );
util.mIsRavenTempestSwitch = true;

while true;
    lib.checkFamiliarPower();
    mutil.CheckMagicBuff(VK_8);
    //Acquisition of Time : Get the time after 3 minutes
    reUseSkillTime = GETTIME( 210 / 86400 );
    useSkill();
    SLEEP(0.5);
    KBD(VK_T,0,2000)
    //lib.checkFamiliarPower();
    //lib.useMaprage();
    while true;
        KBD(VK_LEFT,1)
        KBD(VK_LEFT,2,200)
        for i = 1 to 2
            Attack()
        next
        KBD(VK_RIGHT,1)
        KBD(VK_RIGHT,2,200)
        for i = 1 to 2
            Attack()
        next
        ifb IsEventSkill
            KBD(VK_F1,0,800)
        endif
        //3minutes elapsed?
        if GETTIME() > reUseSkillTime
            break;
        endif
    wend
wend
//=========================================
// param   : None
// comment : None
//=========================================
function Attack()

    yp();
    // execute moveHunting
    util.PathFinder5thJobSkillCheck();
    util.PathFinderSkillCheckSelect(true);
    pSkill();
    for i = 1 to 20
        // 探知機に引っかからないsec:350
        KBD(key.BLAST_AND_DISCHARGE,0,100)
    next    
    // ルーンが出現しているか確認します。
    // 出現していた場合は解除します
    checkRuneStage();
    result = 0;
fend

function UpStageAttack()

    result = 0;
fend

function yp()

    ifb chkimg(lib.picPathHelper("yellowPoint"),0,0,0,160,165)
        ifb G_IMG_Y < 112
           KBD(VK_DOWN,1,200);
           for i = 1 to 3
               KBD(VK_C,0,200)
           next
           KBD(VK_DOWN,2,200);            
        endif

        ifb 45 < G_IMG_X and 130 < G_IMG_Y
           KBD(VK_UP,1,200);
           KBD(key.TRANSITION,0,500);
           KBD(VK_UP,2,200);            
        endif

        ifb G_IMG_X <= 60
            KBD(VK_RIGHT,1)
            KBD(VK_RIGHT,2,1000)
        elseif 80 < G_IMG_X
            KBD(VK_LEFT,1)
            KBD(VK_LEFT,2,1500)
        elseif 125 < G_IMG_X
            while true
                KBD(VK_LEFT,1)
                ifb chkimg(lib.picPathHelper("yellowPoint"),0,45,100,85,165)
                    break;
                endif
            wend
            KBD(VK_LEFT,2,1500)
        endif
    endif

    result = 0;
fend

//=========================================
// param   : None 
// comment : ルーンが出現しているか確認
//=========================================
function checkRuneStage()

	ret = 0;
    runeX = 0;
    runeY = 0;
    ifb chkimg(lib.picPathHelper("runePoint"),0,0,0,140,140)
        ifb 45 < G_IMG_Y and G_IMG_Y < 110
            logger.logWriter(LogLevel.LOG_INFO, "ルーンを上段で発見しました");
            ret = 1; // 上段
            runeX = G_IMG_X;
            runeY = G_IMG_Y;
        elseif 115 < G_IMG_Y and G_IMG_Y < 125
            logger.logWriter(LogLevel.LOG_INFO, "ルーンを中段で発見しました");
            ret = 2; // 中段
            runeX = G_IMG_X;
            runeY = G_IMG_Y;
        elseif 128 < G_IMG_Y and G_IMG_Y < 140
            logger.logWriter(LogLevel.LOG_INFO, "ルーンを下段で発見しました");
            ret = 3;
            runeX = G_IMG_X;
            runeY = G_IMG_Y;
        endif
        moveStage(ret, runeX, runeY);
    endif
    result = ret;
fend

//=========================================
// param   : 1 or 2 or 3
// comment : ルーンが出現している段へ移動
//=========================================
function moveStage(num, runeX, runeY)
    sleep(1)
    yellowPointX = 0;
    yellowPointY = 0;
    b = IsSameStage(runeY);
    lib.OpenRuneXY(runeX, runeY, false);
    result = 0;
fend

function IsSameStage(runeY)
    b = false;
    ifb chkimg(lib.picPathHelper("yellowPoint"),0,0,0,140,140)
        yellowPointY = G_IMG_Y;
        ifb runeY-7 < yellowPointY and yellowPointY < runeY+7
            b = true;
        endif
    endif
    checkStage(b, runeY, YellowPointY)
    result = b;
fend

function checkStage(b, runeY, YellowPointY)
    
    //print "rune:" + runeY + " yp:" + YellowPointY
    ifb b
        result = 0;
    elseif runeY > yellowPointY
        //print "自分の位置より下にルーンを発見"
        KBD(VK_DOWN,1,100)
        for i = 1 to 3
            KBD(VK_C,0,100)
        next
        KBD(VK_DOWN,2,10)
    elseif runeY < yellowPointY
        //print "自分の位置より上にルーンを発見"
        KBD(VK_UP,1,100)
        for i = 1 to 2
            KBD(VK_V,0,250);
        next
        KBD(VK_UP,2,10)        
    endif

    result = 0;
fend


function useSkill()

    KBD(VK_H,0,1000);
	KBD(VK_G,0,1500);
    sleep(2);
	result = 0;

fend

function pSkill()
    if chkimg("../picture/PHS.bmp",0,800,600,1368,800) then KBD(pSkillKey.P_HOLY_SYMBOL,0,1000);
    //if chkimg("../picture/PCO.bmp",0,0,0,1368,800) then KBD(pSkillKey.P_COMBAT_ORDER_KEY,0,1000);
    //if chkimg("../picture/PSE.bmp",0,0,0,1368,800) then KBD(pSkillKey.P_SHARP_EYES_KEY,0,500);
    //if chkimg("../picture/PWB.bmp",0,0,0,1368,800) then KBD(pSkillKey.P_WIND_BOOSTER,0,500);
    //if chkimg("../picture/PHB.bmp",0,0,0,1368,800) then KBD(pSkillKey.P_HYPER_BODY_KEY,0,500);
    result = 0;
fend


function collect()
    print "アイテム回収を行います"
    ifb chkimg(lib.picPathHelper("yellowPoint"),0,0,0,160,160)
        ifb 122 < G_IMG_X
            while true
                KBD(VK_LEFT,1)
                ifb chkimg(lib.picPathHelper("yellowPoint"),0,105,113,122,160)
                    KBD(VK_LEFT,2)
                    break;
                endif
            wend
        endif
    endif

    num = 0;
    ifb chkimg(lib.picPathHelper("yellowPoint"),0,105,110,122,125)
        KBD(VK_SHIFT,0,350);
        sleep(1);
    elseif chkimg(lib.picPathHelper("yellowPoint"),0,110,125,122,140)
        num = 2;
    endif

    for i = 1 to num
        KBD(VK_UP,1,200);
        KBD(key.TRANSITION,0,1000);
        KBD(VK_UP,2,200);
    next

    while true
        KBD(VK_LEFT,1)
        ifb chkimg(lib.picPathHelper("yellowPoint"),0,40,110,85,160)
            KBD(VK_LEFT,2,50)
            break;
        endif
    wend
    KBD(VK_RIGHT,1)
    KBD(VK_RIGHT,2,1200)
    sleep(2)
    for c = 1 to 2
        KBD(VK_DOWN,1,100)
        for i = 1 to 3
            KBD(VK_C,0,100)
        next
        ifb c = 1
            sleep(2.75)
        endif
    next
    KBD(VK_DOWN,2,1000)
    while true
        KBD(VK_RIGHT,1)
        ifb chkimg(lib.picPathHelper("yellowPoint"),0,105,130,158,160)
            KBD(VK_RIGHT,2,50)
            break;
        endif
    wend
    KBD(VK_LEFT,1,50)
    KBD(VK_LEFT,2,100)

    result = 0;
fend

//=========================================
//
// comment : 石化チェック・赤点チェック・加護チェック
// param   : None
// return  : 0 
//
//=========================================
procedure parallelProgram()
    while TRUE
        ifb chkimg("../picture/石化2.bmp",0,0,0,1368,800)
            for i = 1 to 20
                KBD(VK_LEFT,0,100);
                KBD(VK_RIGHT,0,100);
            next
        endif

        ifb chkimg("../picture/赤点.bmp",0,0,0,200,200)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            lib.alartSound();  
        endif   

        ifb chkimg("../picture/redpoint2.bmp",0,0,0,200,200)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DETECTION_RED_POINT);
            lib.alartSound();
        endif   

        ifb chkimg("../picture/緑点.bmp",0,0,115,169,160)
            logger.logWriter(LogLevel.LOG_WARN,Messages.DISCOVERY_GREEN_POINT);
            exitexit;
        endif
    wend
fend