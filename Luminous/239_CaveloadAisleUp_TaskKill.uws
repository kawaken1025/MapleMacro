//=========================================//
// Map Name    : アルカナ ケーヴロードの通路(上)   //
//=========================================//
// Mob Name    : 悲嘆の精霊
// Mob Level   : 239
// Mob HP      : 312,451,200
// Mob Exp     : 462,670
//=========================================//
// Mob Name    : 不調和の精霊
// Mob Level   : 240
// Mob HP      : 318,873,600
// Mob Exp     : 470,824
//=========================================//
// comment     : 赤点検知終了
// param       : None
// return      : None
// ========================================//
// Display Dpl : 1366x768 only
//=========================================//
// Copy Right (C) 2018 All Right Reserved. 
//   @author k.kawabata @kawaken1025
//     Create Date : 2018/04/01
//=========================================//

//=========================================
// init
//=========================================
// MapleAPI : LogWriter.uws , MapleLibrary.uws , UseSkillFiveJob.uws
CALL ../MapleAPI/MapleAPI.uws;
// import Luminous skillKeySetting
CALL KeySetting.uws;
// Util - sugarTime exec
CALL ../Util/MapleUtil.uws;
// multiThread checkRedPoint and checkMineralization
thread lib.parallelProgramExitMode();
thread lib.KillMicrosoftEdge();
thread lib.RegularOnClick();
// Main Script Start
public _IsEqulibrium = false;
public _IsUseDoor = false;
// MessageWindow init
LOGPRINT(true,10,800,500,100)

propUseTime = GETTIME( 7350 / 86400 );
while true;
    //Acquisition of Time : Get the time after 3 minutes
    reUseSkillTime = GETTIME( 180 / 86400 );
    collectTime = GETTIME( 90 / 86400 );
    skill.luminous_useSkill();
    SLEEP(0.5);
    lib.checkFamiliarPower();
    lib.useMaprage();
    while true;
        //oneWayAttack(VK_LEFT,30,100,65,115);
        //oneWayAttack(VK_RIGHT,150,100,190,115);
        OneWayAttack(VK_LEFT,30,100,90,115);
        OneWayAttack(VK_RIGHT,130,100,190,115);
        //3minutes elapsed?
        ifb GETTIME() > collectTime
            collect();
            collectTime = GETTIME( 90 / 86400 );
        endif
        ifb GETTIME() > propUseTime
            KBD(VK_F12,0,1000);
            propUseTime = GETTIME( 7350 / 86400 );
        endif
        if GETTIME() > reUseSkillTime then break;
    wend
wend

//=========================================
// param   : $1:移動方向キー
//           $2:chkimg準拠
// comment : 左右往復
//=========================================
function OneWayAttack(moveKey,x1,y1,x2,y2)
    //execute moveHunting
    while true
        KBD(moveKey,1,100);
        // Equlibrium check
        if chkimg(lib.picPathHelper("mode"),0,0,0,1368,800)     _
            or                                                  _
           chkimg(lib.picPathHelper("memorize"),0,0,0,1368,800) then _IsEqulibrium = true;
        ifb chkimg(lib.picPathHelper("yellowPoint"),0,120,98,180,123);
            skill.luminous_skillCheck();
            ifb _IsEqulibrium
                KBD(key.MEMORIZE_KEY,0,500);
                KBD(key.PSYCHOLOGY_DOOR_KEY,0,800);
                _IsEqulibrium = false;
            endif
        endif
        useSkill.Reflection(key.REFLECTION_KEY);
        useSkill.Teleport(key.TELEPORT_KEY);
        if chkimg(lib.picPathHelper("yellowPoint"),0,x1,y1,x2,y2)     then break;
        if chkimg(lib.picPathHelper("yellowPoint"),0,163,123,180,143) then KBD(key.ROPE_CONNECT_KEY,0,800);
        ifb lib.IsLoginDisp()
            KBD(moveKey,2,100);
            KBD(moveKey,2,100);
            while true
                if chkimg(lib.picPathHelper("yellowPoint"),0,0,0,300,300) then break;
                sleep(1);
            wend
        endif
    wend
    useSkill.Reflection(key.REFLECTION_KEY);
    KBD(moveKey,2,200);
    lib.UrgentCheckCCmode();
    // ルーンが出現しているか確認します。
    // 出現していた場合は解除します
    ret = checkRuneStage();
    ifb ret <> 0
        lib.OpenRune();
    endif
    
    result = 0;
fend

//=========================================
// param   : None 
// comment : ルーンが出現しているか確認
//=========================================
function checkRuneStage()

    // 上段にあるか
    ifb chkimg(lib.picPathHelper("runePoint"),0,0,0,180,120)
        logger.logWriter(LogLevel.LOG_INFO,"ルーンを上段で発見しました。");
        moveStage(1);
        result = constant.DISCOVERY_RUNE;
    elseif chkimg(lib.picPathHelper("runePoint"),0,0,127,180,145)
        logger.logWriter(LogLevel.LOG_INFO,"ルーンを下段で発見しました。");
        moveStage(2);
        result = constant.DISCOVERY_RUNE;
    endif
    
    result = constant.UNDISCOVERED_RUNE;
fend


//=========================================
// param   : 1 or 2
// comment : ルーンが出現している段へ移動
//=========================================
function moveStage(num)
    // いったん一番→へいく
    KBD(VK_RIGHT,1,500)
    while true
        if chkimg(lib.picPathHelper("yellowPoint"),0,170,0,180,143) then break;
        KBD(key.TELEPORT_KEY,0,100)
    wend
    KBD(VK_RIGHT,2,500)
    
    // 上段にルーンがある場合は右へ行って終了
    ifb num = 1
        result = 0;
    
    // 下段にある場合は右へ行って下ジャンプ
    else
        KBD(VK_DOWN,1,500)
        for i = 1 to 5
            KBD(VK_C,0,100)
        next
        KBD(VK_DOWN,2,100)
        result = 0;
    endif
    lib.OpenRune();
    
    result = 0;
fend

function collect()
    // いったん一番→へいく
    KBD(VK_RIGHT,1,500)
    while true
        if chkimg(lib.picPathHelper("yellowPoint"),0,170,0,180,143) then break;
        KBD(key.TELEPORT_KEY,0,100)
    wend
    KBD(VK_RIGHT,2,500)

    // 右へ行って下ジャンプ
    KBD(VK_DOWN,1,500)
    for i = 1 to 5
        KBD(VK_C,0,100)
    next
    KBD(VK_DOWN,2,100)
    KBD(VK_LEFT,1,200)
    for i = 1 to 15
        KBD(VK_SPACE,0,300)
    next
    result = 0;
fend